
Lab 3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003170  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003280  08003280  00013280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032a4  080032a4  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080032a4  080032a4  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032a4  080032a4  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032a4  080032a4  000132a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032a8  080032a8  000132a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080032ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000064  08003310  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08003310  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000095a2  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a73  00000000  00000000  0002962f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  0002b0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000968  00000000  00000000  0002bb20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d36  00000000  00000000  0002c488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba40  00000000  00000000  000431be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000824b5  00000000  00000000  0004ebfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d10b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a30  00000000  00000000  000d1108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	08003268 	.word	0x08003268

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	08003268 	.word	0x08003268

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <is_button_pressed>:
int button_flag[NUM_BUTTONS] = { RESET };
int button_flag_1s[NUM_BUTTONS] = { RESET };

int long_button_flag = 0;

int is_button_pressed(int index) {
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1) {
 8000944:	4a09      	ldr	r2, [pc, #36]	; (800096c <is_button_pressed+0x30>)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d106      	bne.n	800095e <is_button_pressed+0x22>
		button_flag[index] = 0;
 8000950:	4a06      	ldr	r2, [pc, #24]	; (800096c <is_button_pressed+0x30>)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2100      	movs	r1, #0
 8000956:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800095a:	2301      	movs	r3, #1
 800095c:	e000      	b.n	8000960 <is_button_pressed+0x24>
	}
	return 0;
 800095e:	2300      	movs	r3, #0
}
 8000960:	4618      	mov	r0, r3
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	20000080 	.word	0x20000080

08000970 <subKeyProcess>:

void subKeyProcess(int index) {
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	//TODO
	button_flag[index] = 1;
 8000978:	4a04      	ldr	r2, [pc, #16]	; (800098c <subKeyProcess+0x1c>)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2101      	movs	r1, #1
 800097e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr
 800098c:	20000080 	.word	0x20000080

08000990 <is_long_button_flag>:
int is_long_button_flag() {
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
	if (long_button_flag == 1) {
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <is_long_button_flag+0x20>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b01      	cmp	r3, #1
 800099a:	d104      	bne.n	80009a6 <is_long_button_flag+0x16>
		long_button_flag = 0;
 800099c:	4b04      	ldr	r3, [pc, #16]	; (80009b0 <is_long_button_flag+0x20>)
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
		return 1;
 80009a2:	2301      	movs	r3, #1
 80009a4:	e000      	b.n	80009a8 <is_long_button_flag+0x18>
	}
	return 0;
 80009a6:	2300      	movs	r3, #0
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr
 80009b0:	20000098 	.word	0x20000098

080009b4 <getKeyInput>:
//		button_flag_1s[index] = 0;
//		return 1;
//	}
//	return 0;
//}
void getKeyInput() {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++) {
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	e0a8      	b.n	8000b12 <getKeyInput+0x15e>
		KeyReg2[i] = KeyReg1[i];
 80009c0:	4a58      	ldr	r2, [pc, #352]	; (8000b24 <getKeyInput+0x170>)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009c8:	4957      	ldr	r1, [pc, #348]	; (8000b28 <getKeyInput+0x174>)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 80009d0:	4a56      	ldr	r2, [pc, #344]	; (8000b2c <getKeyInput+0x178>)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009d8:	4952      	ldr	r1, [pc, #328]	; (8000b24 <getKeyInput+0x170>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		switch (i) {
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2b02      	cmp	r3, #2
 80009e4:	d01f      	beq.n	8000a26 <getKeyInput+0x72>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	dc27      	bgt.n	8000a3c <getKeyInput+0x88>
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d003      	beq.n	80009fa <getKeyInput+0x46>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d00b      	beq.n	8000a10 <getKeyInput+0x5c>
			break;
		case 2:
			KeyReg0[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
			break;
		default:
			break;
 80009f8:	e020      	b.n	8000a3c <getKeyInput+0x88>
			KeyReg0[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 80009fa:	2101      	movs	r1, #1
 80009fc:	484c      	ldr	r0, [pc, #304]	; (8000b30 <getKeyInput+0x17c>)
 80009fe:	f001 fbfb 	bl	80021f8 <HAL_GPIO_ReadPin>
 8000a02:	4603      	mov	r3, r0
 8000a04:	4619      	mov	r1, r3
 8000a06:	4a49      	ldr	r2, [pc, #292]	; (8000b2c <getKeyInput+0x178>)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000a0e:	e016      	b.n	8000a3e <getKeyInput+0x8a>
			KeyReg0[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 8000a10:	2102      	movs	r1, #2
 8000a12:	4847      	ldr	r0, [pc, #284]	; (8000b30 <getKeyInput+0x17c>)
 8000a14:	f001 fbf0 	bl	80021f8 <HAL_GPIO_ReadPin>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4a43      	ldr	r2, [pc, #268]	; (8000b2c <getKeyInput+0x178>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000a24:	e00b      	b.n	8000a3e <getKeyInput+0x8a>
			KeyReg0[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 8000a26:	2104      	movs	r1, #4
 8000a28:	4841      	ldr	r0, [pc, #260]	; (8000b30 <getKeyInput+0x17c>)
 8000a2a:	f001 fbe5 	bl	80021f8 <HAL_GPIO_ReadPin>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	4619      	mov	r1, r3
 8000a32:	4a3e      	ldr	r2, [pc, #248]	; (8000b2c <getKeyInput+0x178>)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000a3a:	e000      	b.n	8000a3e <getKeyInput+0x8a>
			break;
 8000a3c:	bf00      	nop
		}
		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])) {
 8000a3e:	4a39      	ldr	r2, [pc, #228]	; (8000b24 <getKeyInput+0x170>)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a46:	4939      	ldr	r1, [pc, #228]	; (8000b2c <getKeyInput+0x178>)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	d152      	bne.n	8000af8 <getKeyInput+0x144>
 8000a52:	4a34      	ldr	r2, [pc, #208]	; (8000b24 <getKeyInput+0x170>)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a5a:	4933      	ldr	r1, [pc, #204]	; (8000b28 <getKeyInput+0x174>)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d148      	bne.n	8000af8 <getKeyInput+0x144>
			if (KeyReg2[i] != KeyReg3[i]) {
 8000a66:	4a30      	ldr	r2, [pc, #192]	; (8000b28 <getKeyInput+0x174>)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a6e:	4931      	ldr	r1, [pc, #196]	; (8000b34 <getKeyInput+0x180>)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d011      	beq.n	8000a9e <getKeyInput+0xea>
				KeyReg3[i] = KeyReg2[i];
 8000a7a:	4a2b      	ldr	r2, [pc, #172]	; (8000b28 <getKeyInput+0x174>)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a82:	492c      	ldr	r1, [pc, #176]	; (8000b34 <getKeyInput+0x180>)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (KeyReg3[i] == PRESSED_STATE) {
 8000a8a:	4a2a      	ldr	r2, [pc, #168]	; (8000b34 <getKeyInput+0x180>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d139      	bne.n	8000b0a <getKeyInput+0x156>
					subKeyProcess(i);
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f7ff ff6a 	bl	8000970 <subKeyProcess>
			if (KeyReg2[i] != KeyReg3[i]) {
 8000a9c:	e035      	b.n	8000b0a <getKeyInput+0x156>
				}
			} else {
				TimeOutForKeyPress--;
 8000a9e:	4b26      	ldr	r3, [pc, #152]	; (8000b38 <getKeyInput+0x184>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	4a24      	ldr	r2, [pc, #144]	; (8000b38 <getKeyInput+0x184>)
 8000aa6:	6013      	str	r3, [r2, #0]

				if (TimeOutForKeyPress == 0) {
 8000aa8:	4b23      	ldr	r3, [pc, #140]	; (8000b38 <getKeyInput+0x184>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d10d      	bne.n	8000acc <getKeyInput+0x118>
					if (KeyReg2[i] == PRESSED_STATE) {
 8000ab0:	4a1d      	ldr	r2, [pc, #116]	; (8000b28 <getKeyInput+0x174>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d107      	bne.n	8000acc <getKeyInput+0x118>
						TimeOutForKeyPress = TIME_FOR_PRESS_KEY;
 8000abc:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <getKeyInput+0x184>)
 8000abe:	22c8      	movs	r2, #200	; 0xc8
 8000ac0:	601a      	str	r2, [r3, #0]
						button_flag_1s[i] = 1;
 8000ac2:	4a1e      	ldr	r2, [pc, #120]	; (8000b3c <getKeyInput+0x188>)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

					}
				}
				if ((button_flag_1s[i] == 1)) {
 8000acc:	4a1b      	ldr	r2, [pc, #108]	; (8000b3c <getKeyInput+0x188>)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d118      	bne.n	8000b0a <getKeyInput+0x156>
					TimeOutForLongKeyPress--;
 8000ad8:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <getKeyInput+0x18c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	3b01      	subs	r3, #1
 8000ade:	4a18      	ldr	r2, [pc, #96]	; (8000b40 <getKeyInput+0x18c>)
 8000ae0:	6013      	str	r3, [r2, #0]

					if (TimeOutForLongKeyPress == 0) {
 8000ae2:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <getKeyInput+0x18c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d10f      	bne.n	8000b0a <getKeyInput+0x156>
						long_button_flag = 1;
 8000aea:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <getKeyInput+0x190>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	601a      	str	r2, [r3, #0]
						TimeOutForLongKeyPress = TIME_FOR_LONG_KEY;
 8000af0:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <getKeyInput+0x18c>)
 8000af2:	2219      	movs	r2, #25
 8000af4:	601a      	str	r2, [r3, #0]
			if (KeyReg2[i] != KeyReg3[i]) {
 8000af6:	e008      	b.n	8000b0a <getKeyInput+0x156>
					}
				}

			}
		} else {
			button_flag_1s[i] = 0;
 8000af8:	4a10      	ldr	r2, [pc, #64]	; (8000b3c <getKeyInput+0x188>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2100      	movs	r1, #0
 8000afe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			TimeOutForKeyPress = TIME_FOR_PRESS_KEY;
 8000b02:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <getKeyInput+0x184>)
 8000b04:	22c8      	movs	r2, #200	; 0xc8
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	e000      	b.n	8000b0c <getKeyInput+0x158>
			if (KeyReg2[i] != KeyReg3[i]) {
 8000b0a:	bf00      	nop
	for (int i = 0; i < 3; i++) {
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	f77f af53 	ble.w	80009c0 <getKeyInput+0xc>
		}
	}
}
 8000b1a:	bf00      	nop
 8000b1c:	bf00      	nop
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	2000000c 	.word	0x2000000c
 8000b28:	20000018 	.word	0x20000018
 8000b2c:	20000000 	.word	0x20000000
 8000b30:	40010c00 	.word	0x40010c00
 8000b34:	20000024 	.word	0x20000024
 8000b38:	20000030 	.word	0x20000030
 8000b3c:	2000008c 	.word	0x2000008c
 8000b40:	20000034 	.word	0x20000034
 8000b44:	20000098 	.word	0x20000098

08000b48 <fsm_auto_run>:
#include "light_traffic.h"
#include "global.h"
#include "button.h"


void fsm_auto_run() {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
	switch(statusLed){
 8000b4c:	4b77      	ldr	r3, [pc, #476]	; (8000d2c <fsm_auto_run+0x1e4>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	3b01      	subs	r3, #1
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	f200 80c4 	bhi.w	8000ce0 <fsm_auto_run+0x198>
 8000b58:	a201      	add	r2, pc, #4	; (adr r2, 8000b60 <fsm_auto_run+0x18>)
 8000b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b5e:	bf00      	nop
 8000b60:	08000b75 	.word	0x08000b75
 8000b64:	08000b9d 	.word	0x08000b9d
 8000b68:	08000bf9 	.word	0x08000bf9
 8000b6c:	08000c2d 	.word	0x08000c2d
 8000b70:	08000c87 	.word	0x08000c87
		case INIT:
			red_green();
 8000b74:	f000 fad4 	bl	8001120 <red_green>
			statusLed = RED_GREEN;
 8000b78:	4b6c      	ldr	r3, [pc, #432]	; (8000d2c <fsm_auto_run+0x1e4>)
 8000b7a:	2202      	movs	r2, #2
 8000b7c:	601a      	str	r2, [r3, #0]
			setTimer0(TIME_NORMAL_GREEN*100);
 8000b7e:	4b6c      	ldr	r3, [pc, #432]	; (8000d30 <fsm_auto_run+0x1e8>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2264      	movs	r2, #100	; 0x64
 8000b84:	fb02 f303 	mul.w	r3, r2, r3
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 fedd 	bl	8001948 <setTimer0>
			setTimer1(1);
 8000b8e:	2001      	movs	r0, #1
 8000b90:	f000 feee 	bl	8001970 <setTimer1>
			setTimer2(100);
 8000b94:	2064      	movs	r0, #100	; 0x64
 8000b96:	f000 feff 	bl	8001998 <setTimer2>
			break;
 8000b9a:	e0aa      	b.n	8000cf2 <fsm_auto_run+0x1aa>
		case RED_GREEN:
			red_green();
 8000b9c:	f000 fac0 	bl	8001120 <red_green>
			if (timer0_flag == 1){
 8000ba0:	4b64      	ldr	r3, [pc, #400]	; (8000d34 <fsm_auto_run+0x1ec>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d112      	bne.n	8000bce <fsm_auto_run+0x86>
				statusLed = RED_YELLOW;
 8000ba8:	4b60      	ldr	r3, [pc, #384]	; (8000d2c <fsm_auto_run+0x1e4>)
 8000baa:	2203      	movs	r2, #3
 8000bac:	601a      	str	r2, [r3, #0]
				count1 = TIME_NORMAL_YELLOW;
 8000bae:	4b62      	ldr	r3, [pc, #392]	; (8000d38 <fsm_auto_run+0x1f0>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a62      	ldr	r2, [pc, #392]	; (8000d3c <fsm_auto_run+0x1f4>)
 8000bb4:	6013      	str	r3, [r2, #0]
				count2 = TIME_NORMAL_YELLOW;
 8000bb6:	4b60      	ldr	r3, [pc, #384]	; (8000d38 <fsm_auto_run+0x1f0>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a61      	ldr	r2, [pc, #388]	; (8000d40 <fsm_auto_run+0x1f8>)
 8000bbc:	6013      	str	r3, [r2, #0]
				setTimer0(TIME_NORMAL_YELLOW*100);
 8000bbe:	4b5e      	ldr	r3, [pc, #376]	; (8000d38 <fsm_auto_run+0x1f0>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2264      	movs	r2, #100	; 0x64
 8000bc4:	fb02 f303 	mul.w	r3, r2, r3
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f000 febd 	bl	8001948 <setTimer0>
			}
			if (is_button_pressed(0) == 1){
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f7ff feb4 	bl	800093c <is_button_pressed>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	f040 8084 	bne.w	8000ce4 <fsm_auto_run+0x19c>
					statusLed = MAN_RED;
 8000bdc:	4b53      	ldr	r3, [pc, #332]	; (8000d2c <fsm_auto_run+0x1e4>)
 8000bde:	220c      	movs	r2, #12
 8000be0:	601a      	str	r2, [r3, #0]
					mode = 2;
 8000be2:	4b58      	ldr	r3, [pc, #352]	; (8000d44 <fsm_auto_run+0x1fc>)
 8000be4:	2202      	movs	r2, #2
 8000be6:	601a      	str	r2, [r3, #0]
					setTimer3(20);
 8000be8:	2014      	movs	r0, #20
 8000bea:	f000 fee9 	bl	80019c0 <setTimer3>
					setTimer0(1000);
 8000bee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bf2:	f000 fea9 	bl	8001948 <setTimer0>
			}
			break;
 8000bf6:	e075      	b.n	8000ce4 <fsm_auto_run+0x19c>

		case RED_YELLOW:
			red_yellow();
 8000bf8:	f000 fabc 	bl	8001174 <red_yellow>
			if (timer0_flag == 1){
 8000bfc:	4b4d      	ldr	r3, [pc, #308]	; (8000d34 <fsm_auto_run+0x1ec>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d171      	bne.n	8000ce8 <fsm_auto_run+0x1a0>
				statusLed = GREEN_RED;
 8000c04:	4b49      	ldr	r3, [pc, #292]	; (8000d2c <fsm_auto_run+0x1e4>)
 8000c06:	2204      	movs	r2, #4
 8000c08:	601a      	str	r2, [r3, #0]
				count1 = TIME_NORMAL_GREEN;
 8000c0a:	4b49      	ldr	r3, [pc, #292]	; (8000d30 <fsm_auto_run+0x1e8>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a4b      	ldr	r2, [pc, #300]	; (8000d3c <fsm_auto_run+0x1f4>)
 8000c10:	6013      	str	r3, [r2, #0]
				count2 = TIME_NORMAL_RED;
 8000c12:	4b4d      	ldr	r3, [pc, #308]	; (8000d48 <fsm_auto_run+0x200>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a4a      	ldr	r2, [pc, #296]	; (8000d40 <fsm_auto_run+0x1f8>)
 8000c18:	6013      	str	r3, [r2, #0]
				setTimer0(TIME_NORMAL_GREEN*100);
 8000c1a:	4b45      	ldr	r3, [pc, #276]	; (8000d30 <fsm_auto_run+0x1e8>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2264      	movs	r2, #100	; 0x64
 8000c20:	fb02 f303 	mul.w	r3, r2, r3
 8000c24:	4618      	mov	r0, r3
 8000c26:	f000 fe8f 	bl	8001948 <setTimer0>
			}
			break;
 8000c2a:	e05d      	b.n	8000ce8 <fsm_auto_run+0x1a0>
					mode = 2;
					setTimer3(20);
					setTimer0(1000);
			}
		case GREEN_RED:
			green_red();
 8000c2c:	f000 facc 	bl	80011c8 <green_red>
			if (timer0_flag == 1){
 8000c30:	4b40      	ldr	r3, [pc, #256]	; (8000d34 <fsm_auto_run+0x1ec>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d112      	bne.n	8000c5e <fsm_auto_run+0x116>
				statusLed = YELLOW_RED;
 8000c38:	4b3c      	ldr	r3, [pc, #240]	; (8000d2c <fsm_auto_run+0x1e4>)
 8000c3a:	2205      	movs	r2, #5
 8000c3c:	601a      	str	r2, [r3, #0]
				count1 = TIME_NORMAL_YELLOW;
 8000c3e:	4b3e      	ldr	r3, [pc, #248]	; (8000d38 <fsm_auto_run+0x1f0>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a3e      	ldr	r2, [pc, #248]	; (8000d3c <fsm_auto_run+0x1f4>)
 8000c44:	6013      	str	r3, [r2, #0]
				count2= TIME_NORMAL_YELLOW;
 8000c46:	4b3c      	ldr	r3, [pc, #240]	; (8000d38 <fsm_auto_run+0x1f0>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a3d      	ldr	r2, [pc, #244]	; (8000d40 <fsm_auto_run+0x1f8>)
 8000c4c:	6013      	str	r3, [r2, #0]
				setTimer0(TIME_NORMAL_YELLOW*100);
 8000c4e:	4b3a      	ldr	r3, [pc, #232]	; (8000d38 <fsm_auto_run+0x1f0>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2264      	movs	r2, #100	; 0x64
 8000c54:	fb02 f303 	mul.w	r3, r2, r3
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f000 fe75 	bl	8001948 <setTimer0>
			}
			if (is_button_pressed(0) == 1){
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f7ff fe6c 	bl	800093c <is_button_pressed>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d140      	bne.n	8000cec <fsm_auto_run+0x1a4>
					statusLed = MAN_GREEN;
 8000c6a:	4b30      	ldr	r3, [pc, #192]	; (8000d2c <fsm_auto_run+0x1e4>)
 8000c6c:	220d      	movs	r2, #13
 8000c6e:	601a      	str	r2, [r3, #0]
					mode = 2;
 8000c70:	4b34      	ldr	r3, [pc, #208]	; (8000d44 <fsm_auto_run+0x1fc>)
 8000c72:	2202      	movs	r2, #2
 8000c74:	601a      	str	r2, [r3, #0]
					setTimer3(20);
 8000c76:	2014      	movs	r0, #20
 8000c78:	f000 fea2 	bl	80019c0 <setTimer3>
					setTimer0(1000);
 8000c7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c80:	f000 fe62 	bl	8001948 <setTimer0>
			}
			break;
 8000c84:	e032      	b.n	8000cec <fsm_auto_run+0x1a4>

		case YELLOW_RED:
			yellow_red();
 8000c86:	f000 fac9 	bl	800121c <yellow_red>
			if (timer0_flag == 1){
 8000c8a:	4b2a      	ldr	r3, [pc, #168]	; (8000d34 <fsm_auto_run+0x1ec>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d112      	bne.n	8000cb8 <fsm_auto_run+0x170>
				statusLed = RED_GREEN;
 8000c92:	4b26      	ldr	r3, [pc, #152]	; (8000d2c <fsm_auto_run+0x1e4>)
 8000c94:	2202      	movs	r2, #2
 8000c96:	601a      	str	r2, [r3, #0]
				count1 = TIME_NORMAL_RED;
 8000c98:	4b2b      	ldr	r3, [pc, #172]	; (8000d48 <fsm_auto_run+0x200>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a27      	ldr	r2, [pc, #156]	; (8000d3c <fsm_auto_run+0x1f4>)
 8000c9e:	6013      	str	r3, [r2, #0]
				count2 = TIME_NORMAL_GREEN;
 8000ca0:	4b23      	ldr	r3, [pc, #140]	; (8000d30 <fsm_auto_run+0x1e8>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a26      	ldr	r2, [pc, #152]	; (8000d40 <fsm_auto_run+0x1f8>)
 8000ca6:	6013      	str	r3, [r2, #0]
				setTimer0(TIME_NORMAL_GREEN*100);
 8000ca8:	4b21      	ldr	r3, [pc, #132]	; (8000d30 <fsm_auto_run+0x1e8>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2264      	movs	r2, #100	; 0x64
 8000cae:	fb02 f303 	mul.w	r3, r2, r3
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 fe48 	bl	8001948 <setTimer0>
			}
			if (is_button_pressed(0) == 1){
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f7ff fe3f 	bl	800093c <is_button_pressed>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d115      	bne.n	8000cf0 <fsm_auto_run+0x1a8>
					statusLed = MAN_YELLOW;
 8000cc4:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <fsm_auto_run+0x1e4>)
 8000cc6:	220e      	movs	r2, #14
 8000cc8:	601a      	str	r2, [r3, #0]
					mode = 2;
 8000cca:	4b1e      	ldr	r3, [pc, #120]	; (8000d44 <fsm_auto_run+0x1fc>)
 8000ccc:	2202      	movs	r2, #2
 8000cce:	601a      	str	r2, [r3, #0]
					setTimer3(20);
 8000cd0:	2014      	movs	r0, #20
 8000cd2:	f000 fe75 	bl	80019c0 <setTimer3>
					setTimer0(1000);
 8000cd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cda:	f000 fe35 	bl	8001948 <setTimer0>
			}
			break;
 8000cde:	e007      	b.n	8000cf0 <fsm_auto_run+0x1a8>
		default:
			break;
 8000ce0:	bf00      	nop
 8000ce2:	e006      	b.n	8000cf2 <fsm_auto_run+0x1aa>
			break;
 8000ce4:	bf00      	nop
 8000ce6:	e004      	b.n	8000cf2 <fsm_auto_run+0x1aa>
			break;
 8000ce8:	bf00      	nop
 8000cea:	e002      	b.n	8000cf2 <fsm_auto_run+0x1aa>
			break;
 8000cec:	bf00      	nop
 8000cee:	e000      	b.n	8000cf2 <fsm_auto_run+0x1aa>
			break;
 8000cf0:	bf00      	nop
	}
	// decrease time each second
	if (timer2_flag == 1){
 8000cf2:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <fsm_auto_run+0x204>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d10c      	bne.n	8000d14 <fsm_auto_run+0x1cc>
		count1--;
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <fsm_auto_run+0x1f4>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	4a0e      	ldr	r2, [pc, #56]	; (8000d3c <fsm_auto_run+0x1f4>)
 8000d02:	6013      	str	r3, [r2, #0]
		count2--;
 8000d04:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <fsm_auto_run+0x1f8>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	3b01      	subs	r3, #1
 8000d0a:	4a0d      	ldr	r2, [pc, #52]	; (8000d40 <fsm_auto_run+0x1f8>)
 8000d0c:	6013      	str	r3, [r2, #0]
		setTimer2(100);
 8000d0e:	2064      	movs	r0, #100	; 0x64
 8000d10:	f000 fe42 	bl	8001998 <setTimer2>
	}
	// display 7seg
	if (timer1_flag == 1){
 8000d14:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <fsm_auto_run+0x208>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d104      	bne.n	8000d26 <fsm_auto_run+0x1de>
		  handle7SEG();
 8000d1c:	f000 f81a 	bl	8000d54 <handle7SEG>
		  setTimer1(1);
 8000d20:	2001      	movs	r0, #1
 8000d22:	f000 fe25 	bl	8001970 <setTimer1>
	 }


}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000044 	.word	0x20000044
 8000d30:	2000003c 	.word	0x2000003c
 8000d34:	200000b4 	.word	0x200000b4
 8000d38:	20000040 	.word	0x20000040
 8000d3c:	20000048 	.word	0x20000048
 8000d40:	2000004c 	.word	0x2000004c
 8000d44:	20000054 	.word	0x20000054
 8000d48:	20000038 	.word	0x20000038
 8000d4c:	200000bc 	.word	0x200000bc
 8000d50:	200000b8 	.word	0x200000b8

08000d54 <handle7SEG>:
void handle7SEG() {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
	switch (mode){
 8000d58:	4b07      	ldr	r3, [pc, #28]	; (8000d78 <handle7SEG+0x24>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d102      	bne.n	8000d66 <handle7SEG+0x12>
		case 1:
			update7SEG();
 8000d60:	f000 fafe 	bl	8001360 <update7SEG>
			break;
 8000d64:	e005      	b.n	8000d72 <handle7SEG+0x1e>
		default:
			update7SEG_2(countMan1);
 8000d66:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <handle7SEG+0x28>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 fba6 	bl	80014bc <update7SEG_2>
			break;
 8000d70:	bf00      	nop
	}
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000054 	.word	0x20000054
 8000d7c:	20000050 	.word	0x20000050

08000d80 <fsm_man_run>:
#include "light_traffic.h"
#include "global.h"



void fsm_man_run(){
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
	switch(statusLed){
 8000d84:	4b8a      	ldr	r3, [pc, #552]	; (8000fb0 <fsm_man_run+0x230>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b0e      	cmp	r3, #14
 8000d8a:	f000 8088 	beq.w	8000e9e <fsm_man_run+0x11e>
 8000d8e:	2b0e      	cmp	r3, #14
 8000d90:	f300 81a5 	bgt.w	80010de <fsm_man_run+0x35e>
 8000d94:	2b0c      	cmp	r3, #12
 8000d96:	d003      	beq.n	8000da0 <fsm_man_run+0x20>
 8000d98:	2b0d      	cmp	r3, #13
 8000d9a:	f000 811f 	beq.w	8000fdc <fsm_man_run+0x25c>
				setTimer0(TIME_NORMAL_GREEN*100);

			}
			break;
		default:
			break;
 8000d9e:	e19e      	b.n	80010de <fsm_man_run+0x35e>
			if (timer3_flag == 1){
 8000da0:	4b84      	ldr	r3, [pc, #528]	; (8000fb4 <fsm_man_run+0x234>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d104      	bne.n	8000db2 <fsm_man_run+0x32>
				red_red();
 8000da8:	f000 fa8a 	bl	80012c0 <red_red>
				setTimer3(20);
 8000dac:	2014      	movs	r0, #20
 8000dae:	f000 fe07 	bl	80019c0 <setTimer3>
			if (timer0_flag == 1 ){
 8000db2:	4b81      	ldr	r3, [pc, #516]	; (8000fb8 <fsm_man_run+0x238>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d112      	bne.n	8000de0 <fsm_man_run+0x60>
				statusLed = GREEN_RED;
 8000dba:	4b7d      	ldr	r3, [pc, #500]	; (8000fb0 <fsm_man_run+0x230>)
 8000dbc:	2204      	movs	r2, #4
 8000dbe:	601a      	str	r2, [r3, #0]
				count1 = TIME_NORMAL_GREEN;
 8000dc0:	4b7e      	ldr	r3, [pc, #504]	; (8000fbc <fsm_man_run+0x23c>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a7e      	ldr	r2, [pc, #504]	; (8000fc0 <fsm_man_run+0x240>)
 8000dc6:	6013      	str	r3, [r2, #0]
				count2 = TIME_NORMAL_RED;
 8000dc8:	4b7e      	ldr	r3, [pc, #504]	; (8000fc4 <fsm_man_run+0x244>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a7e      	ldr	r2, [pc, #504]	; (8000fc8 <fsm_man_run+0x248>)
 8000dce:	6013      	str	r3, [r2, #0]
				setTimer1(TIME_NORMAL_GREEN);
 8000dd0:	4b7a      	ldr	r3, [pc, #488]	; (8000fbc <fsm_man_run+0x23c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f000 fdcb 	bl	8001970 <setTimer1>
				mode = 1;
 8000dda:	4b7c      	ldr	r3, [pc, #496]	; (8000fcc <fsm_man_run+0x24c>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	601a      	str	r2, [r3, #0]
			if ((is_long_button_flag() == 1)){
 8000de0:	f7ff fdd6 	bl	8000990 <is_long_button_flag>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d104      	bne.n	8000df4 <fsm_man_run+0x74>
				countMan1++;
 8000dea:	4b79      	ldr	r3, [pc, #484]	; (8000fd0 <fsm_man_run+0x250>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	3301      	adds	r3, #1
 8000df0:	4a77      	ldr	r2, [pc, #476]	; (8000fd0 <fsm_man_run+0x250>)
 8000df2:	6013      	str	r3, [r2, #0]
			if (is_button_pressed(0) == 1){
 8000df4:	2000      	movs	r0, #0
 8000df6:	f7ff fda1 	bl	800093c <is_button_pressed>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d10d      	bne.n	8000e1c <fsm_man_run+0x9c>
				statusLed = MAN_YELLOW;
 8000e00:	4b6b      	ldr	r3, [pc, #428]	; (8000fb0 <fsm_man_run+0x230>)
 8000e02:	220e      	movs	r2, #14
 8000e04:	601a      	str	r2, [r3, #0]
				countMan1 = TIME_NORMAL_YELLOW;
 8000e06:	4b73      	ldr	r3, [pc, #460]	; (8000fd4 <fsm_man_run+0x254>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a71      	ldr	r2, [pc, #452]	; (8000fd0 <fsm_man_run+0x250>)
 8000e0c:	6013      	str	r3, [r2, #0]
				mode = 3;
 8000e0e:	4b6f      	ldr	r3, [pc, #444]	; (8000fcc <fsm_man_run+0x24c>)
 8000e10:	2203      	movs	r2, #3
 8000e12:	601a      	str	r2, [r3, #0]
				setTimer0(10000);
 8000e14:	f242 7010 	movw	r0, #10000	; 0x2710
 8000e18:	f000 fd96 	bl	8001948 <setTimer0>
			if (is_button_pressed(1) == 1){
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	f7ff fd8d 	bl	800093c <is_button_pressed>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d104      	bne.n	8000e32 <fsm_man_run+0xb2>
				countMan1 = countMan1 + 1;
 8000e28:	4b69      	ldr	r3, [pc, #420]	; (8000fd0 <fsm_man_run+0x250>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	4a68      	ldr	r2, [pc, #416]	; (8000fd0 <fsm_man_run+0x250>)
 8000e30:	6013      	str	r3, [r2, #0]
			if (is_button_pressed(2) == 1){
 8000e32:	2002      	movs	r0, #2
 8000e34:	f7ff fd82 	bl	800093c <is_button_pressed>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	f040 8151 	bne.w	80010e2 <fsm_man_run+0x362>
				statusLed = RED_GREEN;
 8000e40:	4b5b      	ldr	r3, [pc, #364]	; (8000fb0 <fsm_man_run+0x230>)
 8000e42:	2202      	movs	r2, #2
 8000e44:	601a      	str	r2, [r3, #0]
				mode = 1;
 8000e46:	4b61      	ldr	r3, [pc, #388]	; (8000fcc <fsm_man_run+0x24c>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	601a      	str	r2, [r3, #0]
				TIME_NORMAL_RED = countMan1;
 8000e4c:	4b60      	ldr	r3, [pc, #384]	; (8000fd0 <fsm_man_run+0x250>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a5c      	ldr	r2, [pc, #368]	; (8000fc4 <fsm_man_run+0x244>)
 8000e52:	6013      	str	r3, [r2, #0]
				TIME_NORMAL_GREEN = countMan1 * 70/100;
 8000e54:	4b5e      	ldr	r3, [pc, #376]	; (8000fd0 <fsm_man_run+0x250>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2246      	movs	r2, #70	; 0x46
 8000e5a:	fb02 f303 	mul.w	r3, r2, r3
 8000e5e:	4a5e      	ldr	r2, [pc, #376]	; (8000fd8 <fsm_man_run+0x258>)
 8000e60:	fb82 1203 	smull	r1, r2, r2, r3
 8000e64:	1152      	asrs	r2, r2, #5
 8000e66:	17db      	asrs	r3, r3, #31
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	4a54      	ldr	r2, [pc, #336]	; (8000fbc <fsm_man_run+0x23c>)
 8000e6c:	6013      	str	r3, [r2, #0]
				TIME_NORMAL_YELLOW = TIME_NORMAL_RED - TIME_NORMAL_GREEN;
 8000e6e:	4b55      	ldr	r3, [pc, #340]	; (8000fc4 <fsm_man_run+0x244>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	4b52      	ldr	r3, [pc, #328]	; (8000fbc <fsm_man_run+0x23c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	4a56      	ldr	r2, [pc, #344]	; (8000fd4 <fsm_man_run+0x254>)
 8000e7a:	6013      	str	r3, [r2, #0]
				count1 = TIME_NORMAL_RED;
 8000e7c:	4b51      	ldr	r3, [pc, #324]	; (8000fc4 <fsm_man_run+0x244>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a4f      	ldr	r2, [pc, #316]	; (8000fc0 <fsm_man_run+0x240>)
 8000e82:	6013      	str	r3, [r2, #0]
				count2 = TIME_NORMAL_GREEN;
 8000e84:	4b4d      	ldr	r3, [pc, #308]	; (8000fbc <fsm_man_run+0x23c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a4f      	ldr	r2, [pc, #316]	; (8000fc8 <fsm_man_run+0x248>)
 8000e8a:	6013      	str	r3, [r2, #0]
				setTimer0(TIME_NORMAL_GREEN*100);
 8000e8c:	4b4b      	ldr	r3, [pc, #300]	; (8000fbc <fsm_man_run+0x23c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2264      	movs	r2, #100	; 0x64
 8000e92:	fb02 f303 	mul.w	r3, r2, r3
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 fd56 	bl	8001948 <setTimer0>
			break;
 8000e9c:	e121      	b.n	80010e2 <fsm_man_run+0x362>
			if (timer3_flag == 1){
 8000e9e:	4b45      	ldr	r3, [pc, #276]	; (8000fb4 <fsm_man_run+0x234>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d104      	bne.n	8000eb0 <fsm_man_run+0x130>
				yellow_yellow();
 8000ea6:	f000 fa33 	bl	8001310 <yellow_yellow>
				setTimer3(20);
 8000eaa:	2014      	movs	r0, #20
 8000eac:	f000 fd88 	bl	80019c0 <setTimer3>
			if (timer0_flag == 1 ){
 8000eb0:	4b41      	ldr	r3, [pc, #260]	; (8000fb8 <fsm_man_run+0x238>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d10f      	bne.n	8000ed8 <fsm_man_run+0x158>
				statusLed = YELLOW_RED;
 8000eb8:	4b3d      	ldr	r3, [pc, #244]	; (8000fb0 <fsm_man_run+0x230>)
 8000eba:	2205      	movs	r2, #5
 8000ebc:	601a      	str	r2, [r3, #0]
				count1 = TIME_NORMAL_YELLOW;
 8000ebe:	4b45      	ldr	r3, [pc, #276]	; (8000fd4 <fsm_man_run+0x254>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a3f      	ldr	r2, [pc, #252]	; (8000fc0 <fsm_man_run+0x240>)
 8000ec4:	6013      	str	r3, [r2, #0]
				count2 = TIME_NORMAL_RED;
 8000ec6:	4b3f      	ldr	r3, [pc, #252]	; (8000fc4 <fsm_man_run+0x244>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a3f      	ldr	r2, [pc, #252]	; (8000fc8 <fsm_man_run+0x248>)
 8000ecc:	6013      	str	r3, [r2, #0]
				setTimer1(TIME_NORMAL_YELLOW);
 8000ece:	4b41      	ldr	r3, [pc, #260]	; (8000fd4 <fsm_man_run+0x254>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 fd4c 	bl	8001970 <setTimer1>
			if (is_button_pressed(0) == 1){
 8000ed8:	2000      	movs	r0, #0
 8000eda:	f7ff fd2f 	bl	800093c <is_button_pressed>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d10d      	bne.n	8000f00 <fsm_man_run+0x180>
				statusLed = MAN_GREEN;
 8000ee4:	4b32      	ldr	r3, [pc, #200]	; (8000fb0 <fsm_man_run+0x230>)
 8000ee6:	220d      	movs	r2, #13
 8000ee8:	601a      	str	r2, [r3, #0]
				countMan1 = TIME_NORMAL_GREEN;
 8000eea:	4b34      	ldr	r3, [pc, #208]	; (8000fbc <fsm_man_run+0x23c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a38      	ldr	r2, [pc, #224]	; (8000fd0 <fsm_man_run+0x250>)
 8000ef0:	6013      	str	r3, [r2, #0]
				mode = 4;
 8000ef2:	4b36      	ldr	r3, [pc, #216]	; (8000fcc <fsm_man_run+0x24c>)
 8000ef4:	2204      	movs	r2, #4
 8000ef6:	601a      	str	r2, [r3, #0]
				setTimer0(10000);
 8000ef8:	f242 7010 	movw	r0, #10000	; 0x2710
 8000efc:	f000 fd24 	bl	8001948 <setTimer0>
			if (is_button_pressed(1) == 1){
 8000f00:	2001      	movs	r0, #1
 8000f02:	f7ff fd1b 	bl	800093c <is_button_pressed>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d104      	bne.n	8000f16 <fsm_man_run+0x196>
				countMan1 = countMan1 + 1;
 8000f0c:	4b30      	ldr	r3, [pc, #192]	; (8000fd0 <fsm_man_run+0x250>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	3301      	adds	r3, #1
 8000f12:	4a2f      	ldr	r2, [pc, #188]	; (8000fd0 <fsm_man_run+0x250>)
 8000f14:	6013      	str	r3, [r2, #0]
			if ((is_long_button_flag() == 1)){
 8000f16:	f7ff fd3b 	bl	8000990 <is_long_button_flag>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d104      	bne.n	8000f2a <fsm_man_run+0x1aa>
				countMan1++;
 8000f20:	4b2b      	ldr	r3, [pc, #172]	; (8000fd0 <fsm_man_run+0x250>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	3301      	adds	r3, #1
 8000f26:	4a2a      	ldr	r2, [pc, #168]	; (8000fd0 <fsm_man_run+0x250>)
 8000f28:	6013      	str	r3, [r2, #0]
			if (is_button_pressed(2) == 1){
 8000f2a:	2002      	movs	r0, #2
 8000f2c:	f7ff fd06 	bl	800093c <is_button_pressed>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	f040 80d7 	bne.w	80010e6 <fsm_man_run+0x366>
				statusLed = YELLOW_RED;
 8000f38:	4b1d      	ldr	r3, [pc, #116]	; (8000fb0 <fsm_man_run+0x230>)
 8000f3a:	2205      	movs	r2, #5
 8000f3c:	601a      	str	r2, [r3, #0]
				mode = 1;
 8000f3e:	4b23      	ldr	r3, [pc, #140]	; (8000fcc <fsm_man_run+0x24c>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	601a      	str	r2, [r3, #0]
				TIME_NORMAL_YELLOW = countMan1;
 8000f44:	4b22      	ldr	r3, [pc, #136]	; (8000fd0 <fsm_man_run+0x250>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a22      	ldr	r2, [pc, #136]	; (8000fd4 <fsm_man_run+0x254>)
 8000f4a:	6013      	str	r3, [r2, #0]
				TIME_NORMAL_RED = countMan1 /0.3;
 8000f4c:	4b20      	ldr	r3, [pc, #128]	; (8000fd0 <fsm_man_run+0x250>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fa4f 	bl	80003f4 <__aeabi_i2d>
 8000f56:	a314      	add	r3, pc, #80	; (adr r3, 8000fa8 <fsm_man_run+0x228>)
 8000f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f5c:	f7ff fbde 	bl	800071c <__aeabi_ddiv>
 8000f60:	4602      	mov	r2, r0
 8000f62:	460b      	mov	r3, r1
 8000f64:	4610      	mov	r0, r2
 8000f66:	4619      	mov	r1, r3
 8000f68:	f7ff fcc0 	bl	80008ec <__aeabi_d2iz>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	4a15      	ldr	r2, [pc, #84]	; (8000fc4 <fsm_man_run+0x244>)
 8000f70:	6013      	str	r3, [r2, #0]
				TIME_NORMAL_GREEN = TIME_NORMAL_RED - TIME_NORMAL_YELLOW;
 8000f72:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <fsm_man_run+0x244>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <fsm_man_run+0x254>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	4a0f      	ldr	r2, [pc, #60]	; (8000fbc <fsm_man_run+0x23c>)
 8000f7e:	6013      	str	r3, [r2, #0]
				count1 = TIME_NORMAL_YELLOW;
 8000f80:	4b14      	ldr	r3, [pc, #80]	; (8000fd4 <fsm_man_run+0x254>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a0e      	ldr	r2, [pc, #56]	; (8000fc0 <fsm_man_run+0x240>)
 8000f86:	6013      	str	r3, [r2, #0]
				count2 = TIME_NORMAL_RED;
 8000f88:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <fsm_man_run+0x244>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a0e      	ldr	r2, [pc, #56]	; (8000fc8 <fsm_man_run+0x248>)
 8000f8e:	6013      	str	r3, [r2, #0]
				setTimer0(TIME_NORMAL_YELLOW*100);
 8000f90:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <fsm_man_run+0x254>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2264      	movs	r2, #100	; 0x64
 8000f96:	fb02 f303 	mul.w	r3, r2, r3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 fcd4 	bl	8001948 <setTimer0>
			break;
 8000fa0:	e0a1      	b.n	80010e6 <fsm_man_run+0x366>
 8000fa2:	bf00      	nop
 8000fa4:	f3af 8000 	nop.w
 8000fa8:	33333333 	.word	0x33333333
 8000fac:	3fd33333 	.word	0x3fd33333
 8000fb0:	20000044 	.word	0x20000044
 8000fb4:	200000c0 	.word	0x200000c0
 8000fb8:	200000b4 	.word	0x200000b4
 8000fbc:	2000003c 	.word	0x2000003c
 8000fc0:	20000048 	.word	0x20000048
 8000fc4:	20000038 	.word	0x20000038
 8000fc8:	2000004c 	.word	0x2000004c
 8000fcc:	20000054 	.word	0x20000054
 8000fd0:	20000050 	.word	0x20000050
 8000fd4:	20000040 	.word	0x20000040
 8000fd8:	51eb851f 	.word	0x51eb851f
			if (timer3_flag == 1){
 8000fdc:	4b46      	ldr	r3, [pc, #280]	; (80010f8 <fsm_man_run+0x378>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d104      	bne.n	8000fee <fsm_man_run+0x26e>
				green_green();
 8000fe4:	f000 f944 	bl	8001270 <green_green>
				setTimer3(20);
 8000fe8:	2014      	movs	r0, #20
 8000fea:	f000 fce9 	bl	80019c0 <setTimer3>
			if (timer0_flag == 1 ){
 8000fee:	4b43      	ldr	r3, [pc, #268]	; (80010fc <fsm_man_run+0x37c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d10f      	bne.n	8001016 <fsm_man_run+0x296>
				statusLed = GREEN_RED;
 8000ff6:	4b42      	ldr	r3, [pc, #264]	; (8001100 <fsm_man_run+0x380>)
 8000ff8:	2204      	movs	r2, #4
 8000ffa:	601a      	str	r2, [r3, #0]
				count1 = TIME_NORMAL_GREEN;
 8000ffc:	4b41      	ldr	r3, [pc, #260]	; (8001104 <fsm_man_run+0x384>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a41      	ldr	r2, [pc, #260]	; (8001108 <fsm_man_run+0x388>)
 8001002:	6013      	str	r3, [r2, #0]
				count2 = TIME_NORMAL_RED;
 8001004:	4b41      	ldr	r3, [pc, #260]	; (800110c <fsm_man_run+0x38c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a41      	ldr	r2, [pc, #260]	; (8001110 <fsm_man_run+0x390>)
 800100a:	6013      	str	r3, [r2, #0]
				setTimer1(TIME_NORMAL_GREEN);
 800100c:	4b3d      	ldr	r3, [pc, #244]	; (8001104 <fsm_man_run+0x384>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	f000 fcad 	bl	8001970 <setTimer1>
			if (is_button_pressed(0) == 1){
 8001016:	2000      	movs	r0, #0
 8001018:	f7ff fc90 	bl	800093c <is_button_pressed>
 800101c:	4603      	mov	r3, r0
 800101e:	2b01      	cmp	r3, #1
 8001020:	d10d      	bne.n	800103e <fsm_man_run+0x2be>
				statusLed = MAN_RED;
 8001022:	4b37      	ldr	r3, [pc, #220]	; (8001100 <fsm_man_run+0x380>)
 8001024:	220c      	movs	r2, #12
 8001026:	601a      	str	r2, [r3, #0]
				countMan1 = TIME_NORMAL_RED;
 8001028:	4b38      	ldr	r3, [pc, #224]	; (800110c <fsm_man_run+0x38c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a39      	ldr	r2, [pc, #228]	; (8001114 <fsm_man_run+0x394>)
 800102e:	6013      	str	r3, [r2, #0]
				mode = 2;
 8001030:	4b39      	ldr	r3, [pc, #228]	; (8001118 <fsm_man_run+0x398>)
 8001032:	2202      	movs	r2, #2
 8001034:	601a      	str	r2, [r3, #0]
				setTimer0(10000);
 8001036:	f242 7010 	movw	r0, #10000	; 0x2710
 800103a:	f000 fc85 	bl	8001948 <setTimer0>
			if (is_button_pressed(1) == 1){
 800103e:	2001      	movs	r0, #1
 8001040:	f7ff fc7c 	bl	800093c <is_button_pressed>
 8001044:	4603      	mov	r3, r0
 8001046:	2b01      	cmp	r3, #1
 8001048:	d104      	bne.n	8001054 <fsm_man_run+0x2d4>
				countMan1 = countMan1 + 1;
 800104a:	4b32      	ldr	r3, [pc, #200]	; (8001114 <fsm_man_run+0x394>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	3301      	adds	r3, #1
 8001050:	4a30      	ldr	r2, [pc, #192]	; (8001114 <fsm_man_run+0x394>)
 8001052:	6013      	str	r3, [r2, #0]
			if ((is_long_button_flag() == 1)){
 8001054:	f7ff fc9c 	bl	8000990 <is_long_button_flag>
 8001058:	4603      	mov	r3, r0
 800105a:	2b01      	cmp	r3, #1
 800105c:	d104      	bne.n	8001068 <fsm_man_run+0x2e8>
				countMan1++;
 800105e:	4b2d      	ldr	r3, [pc, #180]	; (8001114 <fsm_man_run+0x394>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	3301      	adds	r3, #1
 8001064:	4a2b      	ldr	r2, [pc, #172]	; (8001114 <fsm_man_run+0x394>)
 8001066:	6013      	str	r3, [r2, #0]
			if (is_button_pressed(2) == 1){
 8001068:	2002      	movs	r0, #2
 800106a:	f7ff fc67 	bl	800093c <is_button_pressed>
 800106e:	4603      	mov	r3, r0
 8001070:	2b01      	cmp	r3, #1
 8001072:	d13a      	bne.n	80010ea <fsm_man_run+0x36a>
				statusLed = GREEN_RED;
 8001074:	4b22      	ldr	r3, [pc, #136]	; (8001100 <fsm_man_run+0x380>)
 8001076:	2204      	movs	r2, #4
 8001078:	601a      	str	r2, [r3, #0]
				mode = 1;
 800107a:	4b27      	ldr	r3, [pc, #156]	; (8001118 <fsm_man_run+0x398>)
 800107c:	2201      	movs	r2, #1
 800107e:	601a      	str	r2, [r3, #0]
				TIME_NORMAL_GREEN = countMan1;
 8001080:	4b24      	ldr	r3, [pc, #144]	; (8001114 <fsm_man_run+0x394>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a1f      	ldr	r2, [pc, #124]	; (8001104 <fsm_man_run+0x384>)
 8001086:	6013      	str	r3, [r2, #0]
				TIME_NORMAL_RED = countMan1/0.7;
 8001088:	4b22      	ldr	r3, [pc, #136]	; (8001114 <fsm_man_run+0x394>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff f9b1 	bl	80003f4 <__aeabi_i2d>
 8001092:	a317      	add	r3, pc, #92	; (adr r3, 80010f0 <fsm_man_run+0x370>)
 8001094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001098:	f7ff fb40 	bl	800071c <__aeabi_ddiv>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	4610      	mov	r0, r2
 80010a2:	4619      	mov	r1, r3
 80010a4:	f7ff fc22 	bl	80008ec <__aeabi_d2iz>
 80010a8:	4603      	mov	r3, r0
 80010aa:	4a18      	ldr	r2, [pc, #96]	; (800110c <fsm_man_run+0x38c>)
 80010ac:	6013      	str	r3, [r2, #0]
				TIME_NORMAL_YELLOW = TIME_NORMAL_RED - TIME_NORMAL_GREEN;
 80010ae:	4b17      	ldr	r3, [pc, #92]	; (800110c <fsm_man_run+0x38c>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	4b14      	ldr	r3, [pc, #80]	; (8001104 <fsm_man_run+0x384>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	4a18      	ldr	r2, [pc, #96]	; (800111c <fsm_man_run+0x39c>)
 80010ba:	6013      	str	r3, [r2, #0]
				count1 = TIME_NORMAL_GREEN;
 80010bc:	4b11      	ldr	r3, [pc, #68]	; (8001104 <fsm_man_run+0x384>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a11      	ldr	r2, [pc, #68]	; (8001108 <fsm_man_run+0x388>)
 80010c2:	6013      	str	r3, [r2, #0]
				count2 = TIME_NORMAL_RED;
 80010c4:	4b11      	ldr	r3, [pc, #68]	; (800110c <fsm_man_run+0x38c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a11      	ldr	r2, [pc, #68]	; (8001110 <fsm_man_run+0x390>)
 80010ca:	6013      	str	r3, [r2, #0]
				setTimer0(TIME_NORMAL_GREEN*100);
 80010cc:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <fsm_man_run+0x384>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2264      	movs	r2, #100	; 0x64
 80010d2:	fb02 f303 	mul.w	r3, r2, r3
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 fc36 	bl	8001948 <setTimer0>
			break;
 80010dc:	e005      	b.n	80010ea <fsm_man_run+0x36a>
			break;
 80010de:	bf00      	nop
 80010e0:	e004      	b.n	80010ec <fsm_man_run+0x36c>
			break;
 80010e2:	bf00      	nop
 80010e4:	e002      	b.n	80010ec <fsm_man_run+0x36c>
			break;
 80010e6:	bf00      	nop
 80010e8:	e000      	b.n	80010ec <fsm_man_run+0x36c>
			break;
 80010ea:	bf00      	nop
	}
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	66666666 	.word	0x66666666
 80010f4:	3fe66666 	.word	0x3fe66666
 80010f8:	200000c0 	.word	0x200000c0
 80010fc:	200000b4 	.word	0x200000b4
 8001100:	20000044 	.word	0x20000044
 8001104:	2000003c 	.word	0x2000003c
 8001108:	20000048 	.word	0x20000048
 800110c:	20000038 	.word	0x20000038
 8001110:	2000004c 	.word	0x2000004c
 8001114:	20000050 	.word	0x20000050
 8001118:	20000054 	.word	0x20000054
 800111c:	20000040 	.word	0x20000040

08001120 <red_green>:
#include "light_traffic.h"
#include "global.h"

int index_led = 0;

void red_green(){
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 8001124:	2201      	movs	r2, #1
 8001126:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800112a:	4810      	ldr	r0, [pc, #64]	; (800116c <red_green+0x4c>)
 800112c:	f001 f87b 	bl	8002226 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, RESET);
 8001130:	2200      	movs	r2, #0
 8001132:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001136:	480d      	ldr	r0, [pc, #52]	; (800116c <red_green+0x4c>)
 8001138:	f001 f875 	bl	8002226 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, RESET);
 800113c:	2200      	movs	r2, #0
 800113e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001142:	480a      	ldr	r0, [pc, #40]	; (800116c <red_green+0x4c>)
 8001144:	f001 f86f 	bl	8002226 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	2120      	movs	r1, #32
 800114c:	4808      	ldr	r0, [pc, #32]	; (8001170 <red_green+0x50>)
 800114e:	f001 f86a 	bl	8002226 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, RESET);
 8001152:	2200      	movs	r2, #0
 8001154:	2140      	movs	r1, #64	; 0x40
 8001156:	4806      	ldr	r0, [pc, #24]	; (8001170 <red_green+0x50>)
 8001158:	f001 f865 	bl	8002226 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 800115c:	2201      	movs	r2, #1
 800115e:	2180      	movs	r1, #128	; 0x80
 8001160:	4803      	ldr	r0, [pc, #12]	; (8001170 <red_green+0x50>)
 8001162:	f001 f860 	bl	8002226 <HAL_GPIO_WritePin>
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40010800 	.word	0x40010800
 8001170:	40010c00 	.word	0x40010c00

08001174 <red_yellow>:
void red_yellow(){
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 8001178:	2201      	movs	r2, #1
 800117a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800117e:	4810      	ldr	r0, [pc, #64]	; (80011c0 <red_yellow+0x4c>)
 8001180:	f001 f851 	bl	8002226 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, RESET);
 8001184:	2200      	movs	r2, #0
 8001186:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800118a:	480d      	ldr	r0, [pc, #52]	; (80011c0 <red_yellow+0x4c>)
 800118c:	f001 f84b 	bl	8002226 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001196:	480a      	ldr	r0, [pc, #40]	; (80011c0 <red_yellow+0x4c>)
 8001198:	f001 f845 	bl	8002226 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	2120      	movs	r1, #32
 80011a0:	4808      	ldr	r0, [pc, #32]	; (80011c4 <red_yellow+0x50>)
 80011a2:	f001 f840 	bl	8002226 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 80011a6:	2201      	movs	r2, #1
 80011a8:	2140      	movs	r1, #64	; 0x40
 80011aa:	4806      	ldr	r0, [pc, #24]	; (80011c4 <red_yellow+0x50>)
 80011ac:	f001 f83b 	bl	8002226 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, RESET);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2180      	movs	r1, #128	; 0x80
 80011b4:	4803      	ldr	r0, [pc, #12]	; (80011c4 <red_yellow+0x50>)
 80011b6:	f001 f836 	bl	8002226 <HAL_GPIO_WritePin>
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40010800 	.word	0x40010800
 80011c4:	40010c00 	.word	0x40010c00

080011c8 <green_red>:
void green_red(){
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, RESET);
 80011cc:	2200      	movs	r2, #0
 80011ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011d2:	4810      	ldr	r0, [pc, #64]	; (8001214 <green_red+0x4c>)
 80011d4:	f001 f827 	bl	8002226 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, RESET);
 80011d8:	2200      	movs	r2, #0
 80011da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011de:	480d      	ldr	r0, [pc, #52]	; (8001214 <green_red+0x4c>)
 80011e0:	f001 f821 	bl	8002226 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 80011e4:	2201      	movs	r2, #1
 80011e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011ea:	480a      	ldr	r0, [pc, #40]	; (8001214 <green_red+0x4c>)
 80011ec:	f001 f81b 	bl	8002226 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 80011f0:	2201      	movs	r2, #1
 80011f2:	2120      	movs	r1, #32
 80011f4:	4808      	ldr	r0, [pc, #32]	; (8001218 <green_red+0x50>)
 80011f6:	f001 f816 	bl	8002226 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, RESET);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2140      	movs	r1, #64	; 0x40
 80011fe:	4806      	ldr	r0, [pc, #24]	; (8001218 <green_red+0x50>)
 8001200:	f001 f811 	bl	8002226 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, RESET);
 8001204:	2200      	movs	r2, #0
 8001206:	2180      	movs	r1, #128	; 0x80
 8001208:	4803      	ldr	r0, [pc, #12]	; (8001218 <green_red+0x50>)
 800120a:	f001 f80c 	bl	8002226 <HAL_GPIO_WritePin>
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40010800 	.word	0x40010800
 8001218:	40010c00 	.word	0x40010c00

0800121c <yellow_red>:
void yellow_red(){
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, RESET);
 8001220:	2200      	movs	r2, #0
 8001222:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001226:	4810      	ldr	r0, [pc, #64]	; (8001268 <yellow_red+0x4c>)
 8001228:	f000 fffd 	bl	8002226 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 800122c:	2201      	movs	r2, #1
 800122e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001232:	480d      	ldr	r0, [pc, #52]	; (8001268 <yellow_red+0x4c>)
 8001234:	f000 fff7 	bl	8002226 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, RESET);
 8001238:	2200      	movs	r2, #0
 800123a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800123e:	480a      	ldr	r0, [pc, #40]	; (8001268 <yellow_red+0x4c>)
 8001240:	f000 fff1 	bl	8002226 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 8001244:	2201      	movs	r2, #1
 8001246:	2120      	movs	r1, #32
 8001248:	4808      	ldr	r0, [pc, #32]	; (800126c <yellow_red+0x50>)
 800124a:	f000 ffec 	bl	8002226 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, RESET);
 800124e:	2200      	movs	r2, #0
 8001250:	2140      	movs	r1, #64	; 0x40
 8001252:	4806      	ldr	r0, [pc, #24]	; (800126c <yellow_red+0x50>)
 8001254:	f000 ffe7 	bl	8002226 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, RESET);
 8001258:	2200      	movs	r2, #0
 800125a:	2180      	movs	r1, #128	; 0x80
 800125c:	4803      	ldr	r0, [pc, #12]	; (800126c <yellow_red+0x50>)
 800125e:	f000 ffe2 	bl	8002226 <HAL_GPIO_WritePin>
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40010800 	.word	0x40010800
 800126c:	40010c00 	.word	0x40010c00

08001270 <green_green>:
void green_green(){
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin);
 8001274:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001278:	480f      	ldr	r0, [pc, #60]	; (80012b8 <green_green+0x48>)
 800127a:	f000 ffec 	bl	8002256 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001284:	480c      	ldr	r0, [pc, #48]	; (80012b8 <green_green+0x48>)
 8001286:	f000 ffce 	bl	8002226 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, RESET);
 800128a:	2200      	movs	r2, #0
 800128c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001290:	4809      	ldr	r0, [pc, #36]	; (80012b8 <green_green+0x48>)
 8001292:	f000 ffc8 	bl	8002226 <HAL_GPIO_WritePin>

	HAL_GPIO_TogglePin(LED_GREEN_2_GPIO_Port,LED_GREEN_2_Pin );
 8001296:	2180      	movs	r1, #128	; 0x80
 8001298:	4808      	ldr	r0, [pc, #32]	; (80012bc <green_green+0x4c>)
 800129a:	f000 ffdc 	bl	8002256 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, RESET);
 800129e:	2200      	movs	r2, #0
 80012a0:	2140      	movs	r1, #64	; 0x40
 80012a2:	4806      	ldr	r0, [pc, #24]	; (80012bc <green_green+0x4c>)
 80012a4:	f000 ffbf 	bl	8002226 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, RESET);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2120      	movs	r1, #32
 80012ac:	4803      	ldr	r0, [pc, #12]	; (80012bc <green_green+0x4c>)
 80012ae:	f000 ffba 	bl	8002226 <HAL_GPIO_WritePin>

}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40010800 	.word	0x40010800
 80012bc:	40010c00 	.word	0x40010c00

080012c0 <red_red>:
void red_red(){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin);
 80012c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012c8:	480f      	ldr	r0, [pc, #60]	; (8001308 <red_red+0x48>)
 80012ca:	f000 ffc4 	bl	8002256 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, RESET);
 80012ce:	2200      	movs	r2, #0
 80012d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012d4:	480c      	ldr	r0, [pc, #48]	; (8001308 <red_red+0x48>)
 80012d6:	f000 ffa6 	bl	8002226 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012e0:	4809      	ldr	r0, [pc, #36]	; (8001308 <red_red+0x48>)
 80012e2:	f000 ffa0 	bl	8002226 <HAL_GPIO_WritePin>

	HAL_GPIO_TogglePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin);
 80012e6:	2120      	movs	r1, #32
 80012e8:	4808      	ldr	r0, [pc, #32]	; (800130c <red_red+0x4c>)
 80012ea:	f000 ffb4 	bl	8002256 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, RESET);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2140      	movs	r1, #64	; 0x40
 80012f2:	4806      	ldr	r0, [pc, #24]	; (800130c <red_red+0x4c>)
 80012f4:	f000 ff97 	bl	8002226 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, RESET);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2180      	movs	r1, #128	; 0x80
 80012fc:	4803      	ldr	r0, [pc, #12]	; (800130c <red_red+0x4c>)
 80012fe:	f000 ff92 	bl	8002226 <HAL_GPIO_WritePin>

}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40010800 	.word	0x40010800
 800130c:	40010c00 	.word	0x40010c00

08001310 <yellow_yellow>:
void yellow_yellow(){
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin);
 8001314:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001318:	480f      	ldr	r0, [pc, #60]	; (8001358 <yellow_yellow+0x48>)
 800131a:	f000 ff9c 	bl	8002256 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001324:	480c      	ldr	r0, [pc, #48]	; (8001358 <yellow_yellow+0x48>)
 8001326:	f000 ff7e 	bl	8002226 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, RESET);
 800132a:	2200      	movs	r2, #0
 800132c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001330:	4809      	ldr	r0, [pc, #36]	; (8001358 <yellow_yellow+0x48>)
 8001332:	f000 ff78 	bl	8002226 <HAL_GPIO_WritePin>


	HAL_GPIO_TogglePin(LED_YELLOW_2_GPIO_Port,LED_YELLOW_2_Pin );
 8001336:	2140      	movs	r1, #64	; 0x40
 8001338:	4808      	ldr	r0, [pc, #32]	; (800135c <yellow_yellow+0x4c>)
 800133a:	f000 ff8c 	bl	8002256 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port,LED_RED_2_Pin , RESET);
 800133e:	2200      	movs	r2, #0
 8001340:	2120      	movs	r1, #32
 8001342:	4806      	ldr	r0, [pc, #24]	; (800135c <yellow_yellow+0x4c>)
 8001344:	f000 ff6f 	bl	8002226 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, RESET);
 8001348:	2200      	movs	r2, #0
 800134a:	2180      	movs	r1, #128	; 0x80
 800134c:	4803      	ldr	r0, [pc, #12]	; (800135c <yellow_yellow+0x4c>)
 800134e:	f000 ff6a 	bl	8002226 <HAL_GPIO_WritePin>
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40010800 	.word	0x40010800
 800135c:	40010c00 	.word	0x40010c00

08001360 <update7SEG>:
void update7SEG (){
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0

	switch (index_led)
 8001364:	4b4f      	ldr	r3, [pc, #316]	; (80014a4 <update7SEG+0x144>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b04      	cmp	r3, #4
 800136a:	f200 8098 	bhi.w	800149e <update7SEG+0x13e>
 800136e:	a201      	add	r2, pc, #4	; (adr r2, 8001374 <update7SEG+0x14>)
 8001370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001374:	08001389 	.word	0x08001389
 8001378:	080013bf 	.word	0x080013bf
 800137c:	080013ff 	.word	0x080013ff
 8001380:	08001435 	.word	0x08001435
 8001384:	08001475 	.word	0x08001475
		  {
			  case 0:
				  HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_RESET);
 8001388:	2200      	movs	r2, #0
 800138a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800138e:	4846      	ldr	r0, [pc, #280]	; (80014a8 <update7SEG+0x148>)
 8001390:	f000 ff49 	bl	8002226 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(DIGIT_1_GPIO_Port, DIGIT_1_Pin, GPIO_PIN_SET);
 8001394:	2201      	movs	r2, #1
 8001396:	f44f 7180 	mov.w	r1, #256	; 0x100
 800139a:	4843      	ldr	r0, [pc, #268]	; (80014a8 <update7SEG+0x148>)
 800139c:	f000 ff43 	bl	8002226 <HAL_GPIO_WritePin>
				  display7SEG(count1 / 10);
 80013a0:	4b42      	ldr	r3, [pc, #264]	; (80014ac <update7SEG+0x14c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a42      	ldr	r2, [pc, #264]	; (80014b0 <update7SEG+0x150>)
 80013a6:	fb82 1203 	smull	r1, r2, r2, r3
 80013aa:	1092      	asrs	r2, r2, #2
 80013ac:	17db      	asrs	r3, r3, #31
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 f92d 	bl	8001610 <display7SEG>
				  index_led = 1;
 80013b6:	4b3b      	ldr	r3, [pc, #236]	; (80014a4 <update7SEG+0x144>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	601a      	str	r2, [r3, #0]
				  break;
 80013bc:	e06f      	b.n	800149e <update7SEG+0x13e>
			  case 1:
				  HAL_GPIO_WritePin(DIGIT_1_GPIO_Port, DIGIT_1_Pin, GPIO_PIN_RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013c4:	4838      	ldr	r0, [pc, #224]	; (80014a8 <update7SEG+0x148>)
 80013c6:	f000 ff2e 	bl	8002226 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(DIGIT_2_GPIO_Port, DIGIT_2_Pin, GPIO_PIN_SET);
 80013ca:	2201      	movs	r2, #1
 80013cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013d0:	4835      	ldr	r0, [pc, #212]	; (80014a8 <update7SEG+0x148>)
 80013d2:	f000 ff28 	bl	8002226 <HAL_GPIO_WritePin>
				  display7SEG(count1 % 10);
 80013d6:	4b35      	ldr	r3, [pc, #212]	; (80014ac <update7SEG+0x14c>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	4b35      	ldr	r3, [pc, #212]	; (80014b0 <update7SEG+0x150>)
 80013dc:	fb83 1302 	smull	r1, r3, r3, r2
 80013e0:	1099      	asrs	r1, r3, #2
 80013e2:	17d3      	asrs	r3, r2, #31
 80013e4:	1ac9      	subs	r1, r1, r3
 80013e6:	460b      	mov	r3, r1
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	440b      	add	r3, r1
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	1ad1      	subs	r1, r2, r3
 80013f0:	4608      	mov	r0, r1
 80013f2:	f000 f90d 	bl	8001610 <display7SEG>
				  index_led = 2;
 80013f6:	4b2b      	ldr	r3, [pc, #172]	; (80014a4 <update7SEG+0x144>)
 80013f8:	2202      	movs	r2, #2
 80013fa:	601a      	str	r2, [r3, #0]
				  break;
 80013fc:	e04f      	b.n	800149e <update7SEG+0x13e>
			  case 2:
				  HAL_GPIO_WritePin(DIGIT_2_GPIO_Port, DIGIT_2_Pin, GPIO_PIN_RESET);
 80013fe:	2200      	movs	r2, #0
 8001400:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001404:	4828      	ldr	r0, [pc, #160]	; (80014a8 <update7SEG+0x148>)
 8001406:	f000 ff0e 	bl	8002226 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(DIGIT_3_GPIO_Port, DIGIT_3_Pin, GPIO_PIN_SET);
 800140a:	2201      	movs	r2, #1
 800140c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001410:	4825      	ldr	r0, [pc, #148]	; (80014a8 <update7SEG+0x148>)
 8001412:	f000 ff08 	bl	8002226 <HAL_GPIO_WritePin>
				  display7SEG(count2 / 10);
 8001416:	4b27      	ldr	r3, [pc, #156]	; (80014b4 <update7SEG+0x154>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a25      	ldr	r2, [pc, #148]	; (80014b0 <update7SEG+0x150>)
 800141c:	fb82 1203 	smull	r1, r2, r2, r3
 8001420:	1092      	asrs	r2, r2, #2
 8001422:	17db      	asrs	r3, r3, #31
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	4618      	mov	r0, r3
 8001428:	f000 f8f2 	bl	8001610 <display7SEG>
				  index_led = 3;
 800142c:	4b1d      	ldr	r3, [pc, #116]	; (80014a4 <update7SEG+0x144>)
 800142e:	2203      	movs	r2, #3
 8001430:	601a      	str	r2, [r3, #0]
				  break;
 8001432:	e034      	b.n	800149e <update7SEG+0x13e>
			  case 3:
				  HAL_GPIO_WritePin(DIGIT_3_GPIO_Port,DIGIT_3_Pin , GPIO_PIN_RESET);
 8001434:	2200      	movs	r2, #0
 8001436:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800143a:	481b      	ldr	r0, [pc, #108]	; (80014a8 <update7SEG+0x148>)
 800143c:	f000 fef3 	bl	8002226 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(DIGIT_4_GPIO_Port,DIGIT_4_Pin, GPIO_PIN_SET);
 8001440:	2201      	movs	r2, #1
 8001442:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001446:	4818      	ldr	r0, [pc, #96]	; (80014a8 <update7SEG+0x148>)
 8001448:	f000 feed 	bl	8002226 <HAL_GPIO_WritePin>
				  display7SEG(count2 % 10);
 800144c:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <update7SEG+0x154>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <update7SEG+0x150>)
 8001452:	fb83 1302 	smull	r1, r3, r3, r2
 8001456:	1099      	asrs	r1, r3, #2
 8001458:	17d3      	asrs	r3, r2, #31
 800145a:	1ac9      	subs	r1, r1, r3
 800145c:	460b      	mov	r3, r1
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	440b      	add	r3, r1
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	1ad1      	subs	r1, r2, r3
 8001466:	4608      	mov	r0, r1
 8001468:	f000 f8d2 	bl	8001610 <display7SEG>
				  index_led = 4;
 800146c:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <update7SEG+0x144>)
 800146e:	2204      	movs	r2, #4
 8001470:	601a      	str	r2, [r3, #0]
				  break;
 8001472:	e014      	b.n	800149e <update7SEG+0x13e>
			  case 4:
				  HAL_GPIO_WritePin(DIGIT_4_GPIO_Port,DIGIT_4_Pin , GPIO_PIN_RESET);
 8001474:	2200      	movs	r2, #0
 8001476:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800147a:	480b      	ldr	r0, [pc, #44]	; (80014a8 <update7SEG+0x148>)
 800147c:	f000 fed3 	bl	8002226 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(MODE_GPIO_Port,MODE_Pin, GPIO_PIN_SET);
 8001480:	2201      	movs	r2, #1
 8001482:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001486:	4808      	ldr	r0, [pc, #32]	; (80014a8 <update7SEG+0x148>)
 8001488:	f000 fecd 	bl	8002226 <HAL_GPIO_WritePin>
				  display7SEG(mode);
 800148c:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <update7SEG+0x158>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f000 f8bd 	bl	8001610 <display7SEG>
				  index_led = 0;
 8001496:	4b03      	ldr	r3, [pc, #12]	; (80014a4 <update7SEG+0x144>)
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
				  break;
 800149c:	bf00      	nop
		  }

}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	2000009c 	.word	0x2000009c
 80014a8:	40010800 	.word	0x40010800
 80014ac:	20000048 	.word	0x20000048
 80014b0:	66666667 	.word	0x66666667
 80014b4:	2000004c 	.word	0x2000004c
 80014b8:	20000054 	.word	0x20000054

080014bc <update7SEG_2>:
void update7SEG_2 (int num){
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]

	switch (index_led)
 80014c4:	4b4e      	ldr	r3, [pc, #312]	; (8001600 <update7SEG_2+0x144>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b04      	cmp	r3, #4
 80014ca:	f200 8094 	bhi.w	80015f6 <update7SEG_2+0x13a>
 80014ce:	a201      	add	r2, pc, #4	; (adr r2, 80014d4 <update7SEG_2+0x18>)
 80014d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d4:	080014e9 	.word	0x080014e9
 80014d8:	0800151d 	.word	0x0800151d
 80014dc:	0800155b 	.word	0x0800155b
 80014e0:	0800158f 	.word	0x0800158f
 80014e4:	080015cd 	.word	0x080015cd
		  {
			  case 0:
				  HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_RESET);
 80014e8:	2200      	movs	r2, #0
 80014ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014ee:	4845      	ldr	r0, [pc, #276]	; (8001604 <update7SEG_2+0x148>)
 80014f0:	f000 fe99 	bl	8002226 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(DIGIT_1_GPIO_Port, DIGIT_1_Pin, GPIO_PIN_SET);
 80014f4:	2201      	movs	r2, #1
 80014f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014fa:	4842      	ldr	r0, [pc, #264]	; (8001604 <update7SEG_2+0x148>)
 80014fc:	f000 fe93 	bl	8002226 <HAL_GPIO_WritePin>
				  display7SEG(num / 10);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4a41      	ldr	r2, [pc, #260]	; (8001608 <update7SEG_2+0x14c>)
 8001504:	fb82 1203 	smull	r1, r2, r2, r3
 8001508:	1092      	asrs	r2, r2, #2
 800150a:	17db      	asrs	r3, r3, #31
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	4618      	mov	r0, r3
 8001510:	f000 f87e 	bl	8001610 <display7SEG>
				  index_led = 1;
 8001514:	4b3a      	ldr	r3, [pc, #232]	; (8001600 <update7SEG_2+0x144>)
 8001516:	2201      	movs	r2, #1
 8001518:	601a      	str	r2, [r3, #0]
				  break;
 800151a:	e06c      	b.n	80015f6 <update7SEG_2+0x13a>
			  case 1:
				  HAL_GPIO_WritePin(DIGIT_1_GPIO_Port, DIGIT_1_Pin, GPIO_PIN_RESET);
 800151c:	2200      	movs	r2, #0
 800151e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001522:	4838      	ldr	r0, [pc, #224]	; (8001604 <update7SEG_2+0x148>)
 8001524:	f000 fe7f 	bl	8002226 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(DIGIT_2_GPIO_Port, DIGIT_2_Pin, GPIO_PIN_SET);
 8001528:	2201      	movs	r2, #1
 800152a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800152e:	4835      	ldr	r0, [pc, #212]	; (8001604 <update7SEG_2+0x148>)
 8001530:	f000 fe79 	bl	8002226 <HAL_GPIO_WritePin>
				  display7SEG(num % 10);
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	4b34      	ldr	r3, [pc, #208]	; (8001608 <update7SEG_2+0x14c>)
 8001538:	fb83 1302 	smull	r1, r3, r3, r2
 800153c:	1099      	asrs	r1, r3, #2
 800153e:	17d3      	asrs	r3, r2, #31
 8001540:	1ac9      	subs	r1, r1, r3
 8001542:	460b      	mov	r3, r1
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	440b      	add	r3, r1
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	1ad1      	subs	r1, r2, r3
 800154c:	4608      	mov	r0, r1
 800154e:	f000 f85f 	bl	8001610 <display7SEG>
				  index_led = 2;
 8001552:	4b2b      	ldr	r3, [pc, #172]	; (8001600 <update7SEG_2+0x144>)
 8001554:	2202      	movs	r2, #2
 8001556:	601a      	str	r2, [r3, #0]
				  break;
 8001558:	e04d      	b.n	80015f6 <update7SEG_2+0x13a>
			  case 2:
				  HAL_GPIO_WritePin(DIGIT_2_GPIO_Port, DIGIT_2_Pin, GPIO_PIN_RESET);
 800155a:	2200      	movs	r2, #0
 800155c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001560:	4828      	ldr	r0, [pc, #160]	; (8001604 <update7SEG_2+0x148>)
 8001562:	f000 fe60 	bl	8002226 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(DIGIT_3_GPIO_Port, DIGIT_3_Pin, GPIO_PIN_SET);
 8001566:	2201      	movs	r2, #1
 8001568:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800156c:	4825      	ldr	r0, [pc, #148]	; (8001604 <update7SEG_2+0x148>)
 800156e:	f000 fe5a 	bl	8002226 <HAL_GPIO_WritePin>
				  display7SEG(num / 10);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a24      	ldr	r2, [pc, #144]	; (8001608 <update7SEG_2+0x14c>)
 8001576:	fb82 1203 	smull	r1, r2, r2, r3
 800157a:	1092      	asrs	r2, r2, #2
 800157c:	17db      	asrs	r3, r3, #31
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	4618      	mov	r0, r3
 8001582:	f000 f845 	bl	8001610 <display7SEG>
				  index_led = 3;
 8001586:	4b1e      	ldr	r3, [pc, #120]	; (8001600 <update7SEG_2+0x144>)
 8001588:	2203      	movs	r2, #3
 800158a:	601a      	str	r2, [r3, #0]
				  break;
 800158c:	e033      	b.n	80015f6 <update7SEG_2+0x13a>
			  case 3:
				  HAL_GPIO_WritePin(DIGIT_3_GPIO_Port,DIGIT_3_Pin , GPIO_PIN_RESET);
 800158e:	2200      	movs	r2, #0
 8001590:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001594:	481b      	ldr	r0, [pc, #108]	; (8001604 <update7SEG_2+0x148>)
 8001596:	f000 fe46 	bl	8002226 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(DIGIT_4_GPIO_Port,DIGIT_4_Pin, GPIO_PIN_SET);
 800159a:	2201      	movs	r2, #1
 800159c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015a0:	4818      	ldr	r0, [pc, #96]	; (8001604 <update7SEG_2+0x148>)
 80015a2:	f000 fe40 	bl	8002226 <HAL_GPIO_WritePin>
				  display7SEG(num % 10);
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	4b17      	ldr	r3, [pc, #92]	; (8001608 <update7SEG_2+0x14c>)
 80015aa:	fb83 1302 	smull	r1, r3, r3, r2
 80015ae:	1099      	asrs	r1, r3, #2
 80015b0:	17d3      	asrs	r3, r2, #31
 80015b2:	1ac9      	subs	r1, r1, r3
 80015b4:	460b      	mov	r3, r1
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	440b      	add	r3, r1
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	1ad1      	subs	r1, r2, r3
 80015be:	4608      	mov	r0, r1
 80015c0:	f000 f826 	bl	8001610 <display7SEG>
				  index_led = 4;
 80015c4:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <update7SEG_2+0x144>)
 80015c6:	2204      	movs	r2, #4
 80015c8:	601a      	str	r2, [r3, #0]
				  break;
 80015ca:	e014      	b.n	80015f6 <update7SEG_2+0x13a>
			  case 4:
				  HAL_GPIO_WritePin(DIGIT_4_GPIO_Port,DIGIT_4_Pin , GPIO_PIN_RESET);
 80015cc:	2200      	movs	r2, #0
 80015ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015d2:	480c      	ldr	r0, [pc, #48]	; (8001604 <update7SEG_2+0x148>)
 80015d4:	f000 fe27 	bl	8002226 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(MODE_GPIO_Port,MODE_Pin, GPIO_PIN_SET);
 80015d8:	2201      	movs	r2, #1
 80015da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015de:	4809      	ldr	r0, [pc, #36]	; (8001604 <update7SEG_2+0x148>)
 80015e0:	f000 fe21 	bl	8002226 <HAL_GPIO_WritePin>
				  display7SEG(mode);
 80015e4:	4b09      	ldr	r3, [pc, #36]	; (800160c <update7SEG_2+0x150>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f000 f811 	bl	8001610 <display7SEG>
				  index_led = 0;
 80015ee:	4b04      	ldr	r3, [pc, #16]	; (8001600 <update7SEG_2+0x144>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
				  break;
 80015f4:	bf00      	nop
		  }

}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	2000009c 	.word	0x2000009c
 8001604:	40010800 	.word	0x40010800
 8001608:	66666667 	.word	0x66666667
 800160c:	20000054 	.word	0x20000054

08001610 <display7SEG>:
void display7SEG(int k){
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b09      	cmp	r3, #9
 800161c:	d87f      	bhi.n	800171e <display7SEG+0x10e>
 800161e:	a201      	add	r2, pc, #4	; (adr r2, 8001624 <display7SEG+0x14>)
 8001620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001624:	0800164d 	.word	0x0800164d
 8001628:	08001663 	.word	0x08001663
 800162c:	08001679 	.word	0x08001679
 8001630:	0800168f 	.word	0x0800168f
 8001634:	080016a5 	.word	0x080016a5
 8001638:	080016bb 	.word	0x080016bb
 800163c:	080016d1 	.word	0x080016d1
 8001640:	080016e7 	.word	0x080016e7
 8001644:	080016fd 	.word	0x080016fd
 8001648:	08001709 	.word	0x08001709
	switch (k){
	case 0:
		  HAL_GPIO_WritePin(GPIOA, LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 800164c:	2200      	movs	r2, #0
 800164e:	217e      	movs	r1, #126	; 0x7e
 8001650:	4835      	ldr	r0, [pc, #212]	; (8001728 <display7SEG+0x118>)
 8001652:	f000 fde8 	bl	8002226 <HAL_GPIO_WritePin>
		                          |LED_E_Pin|LED_F_Pin, GPIO_PIN_RESET);

		  HAL_GPIO_WritePin(GPIOA, LED_G_Pin, GPIO_PIN_SET);
 8001656:	2201      	movs	r2, #1
 8001658:	2180      	movs	r1, #128	; 0x80
 800165a:	4833      	ldr	r0, [pc, #204]	; (8001728 <display7SEG+0x118>)
 800165c:	f000 fde3 	bl	8002226 <HAL_GPIO_WritePin>
		break;
 8001660:	e05e      	b.n	8001720 <display7SEG+0x110>
	case 1:
		  HAL_GPIO_WritePin(GPIOA, LED_B_Pin|LED_C_Pin, GPIO_PIN_RESET);
 8001662:	2200      	movs	r2, #0
 8001664:	210c      	movs	r1, #12
 8001666:	4830      	ldr	r0, [pc, #192]	; (8001728 <display7SEG+0x118>)
 8001668:	f000 fddd 	bl	8002226 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOA, LED_A_Pin|LED_D_Pin
 800166c:	2201      	movs	r2, #1
 800166e:	21f2      	movs	r1, #242	; 0xf2
 8001670:	482d      	ldr	r0, [pc, #180]	; (8001728 <display7SEG+0x118>)
 8001672:	f000 fdd8 	bl	8002226 <HAL_GPIO_WritePin>
		                          |LED_E_Pin|LED_F_Pin|LED_G_Pin, GPIO_PIN_SET);
		break;
 8001676:	e053      	b.n	8001720 <display7SEG+0x110>
	case 2:
		  HAL_GPIO_WritePin(GPIOA, LED_A_Pin|LED_B_Pin | LED_D_Pin
 8001678:	2200      	movs	r2, #0
 800167a:	21b6      	movs	r1, #182	; 0xb6
 800167c:	482a      	ldr	r0, [pc, #168]	; (8001728 <display7SEG+0x118>)
 800167e:	f000 fdd2 	bl	8002226 <HAL_GPIO_WritePin>
		                          |LED_E_Pin|LED_G_Pin, GPIO_PIN_RESET);

		  HAL_GPIO_WritePin(GPIOA,LED_C_Pin|LED_F_Pin, GPIO_PIN_SET);
 8001682:	2201      	movs	r2, #1
 8001684:	2148      	movs	r1, #72	; 0x48
 8001686:	4828      	ldr	r0, [pc, #160]	; (8001728 <display7SEG+0x118>)
 8001688:	f000 fdcd 	bl	8002226 <HAL_GPIO_WritePin>
		break;
 800168c:	e048      	b.n	8001720 <display7SEG+0x110>
	case 3:
		  HAL_GPIO_WritePin(GPIOA, LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 800168e:	2200      	movs	r2, #0
 8001690:	219e      	movs	r1, #158	; 0x9e
 8001692:	4825      	ldr	r0, [pc, #148]	; (8001728 <display7SEG+0x118>)
 8001694:	f000 fdc7 	bl	8002226 <HAL_GPIO_WritePin>
		                          |LED_G_Pin, GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(GPIOA, LED_E_Pin|LED_F_Pin, GPIO_PIN_SET);
 8001698:	2201      	movs	r2, #1
 800169a:	2160      	movs	r1, #96	; 0x60
 800169c:	4822      	ldr	r0, [pc, #136]	; (8001728 <display7SEG+0x118>)
 800169e:	f000 fdc2 	bl	8002226 <HAL_GPIO_WritePin>
		break;
 80016a2:	e03d      	b.n	8001720 <display7SEG+0x110>
	case 4:
		  HAL_GPIO_WritePin(GPIOA, LED_B_Pin|LED_C_Pin |LED_F_Pin|LED_G_Pin, GPIO_PIN_RESET);
 80016a4:	2200      	movs	r2, #0
 80016a6:	21cc      	movs	r1, #204	; 0xcc
 80016a8:	481f      	ldr	r0, [pc, #124]	; (8001728 <display7SEG+0x118>)
 80016aa:	f000 fdbc 	bl	8002226 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOA, LED_A_Pin|LED_D_Pin|LED_E_Pin, GPIO_PIN_SET);
 80016ae:	2201      	movs	r2, #1
 80016b0:	2132      	movs	r1, #50	; 0x32
 80016b2:	481d      	ldr	r0, [pc, #116]	; (8001728 <display7SEG+0x118>)
 80016b4:	f000 fdb7 	bl	8002226 <HAL_GPIO_WritePin>
		break;
 80016b8:	e032      	b.n	8001720 <display7SEG+0x110>
	case 5:
		  HAL_GPIO_WritePin(GPIOA, LED_A_Pin|LED_C_Pin|LED_D_Pin
 80016ba:	2200      	movs	r2, #0
 80016bc:	21da      	movs	r1, #218	; 0xda
 80016be:	481a      	ldr	r0, [pc, #104]	; (8001728 <display7SEG+0x118>)
 80016c0:	f000 fdb1 	bl	8002226 <HAL_GPIO_WritePin>
		                          |LED_F_Pin|LED_G_Pin, GPIO_PIN_RESET);

		  HAL_GPIO_WritePin(GPIOA,LED_B_Pin|LED_E_Pin, GPIO_PIN_SET);
 80016c4:	2201      	movs	r2, #1
 80016c6:	2124      	movs	r1, #36	; 0x24
 80016c8:	4817      	ldr	r0, [pc, #92]	; (8001728 <display7SEG+0x118>)
 80016ca:	f000 fdac 	bl	8002226 <HAL_GPIO_WritePin>
		break;
 80016ce:	e027      	b.n	8001720 <display7SEG+0x110>
	case 6:
		  HAL_GPIO_WritePin(GPIOA,LED_B_Pin, GPIO_PIN_SET);
 80016d0:	2201      	movs	r2, #1
 80016d2:	2104      	movs	r1, #4
 80016d4:	4814      	ldr	r0, [pc, #80]	; (8001728 <display7SEG+0x118>)
 80016d6:	f000 fda6 	bl	8002226 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOA, LED_A_Pin|LED_C_Pin|LED_D_Pin
 80016da:	2200      	movs	r2, #0
 80016dc:	21fa      	movs	r1, #250	; 0xfa
 80016de:	4812      	ldr	r0, [pc, #72]	; (8001728 <display7SEG+0x118>)
 80016e0:	f000 fda1 	bl	8002226 <HAL_GPIO_WritePin>
		                          |LED_E_Pin|LED_F_Pin|LED_G_Pin, GPIO_PIN_RESET);

		break;
 80016e4:	e01c      	b.n	8001720 <display7SEG+0x110>
	case 7:
		  HAL_GPIO_WritePin(GPIOA, LED_A_Pin|LED_B_Pin|LED_C_Pin , GPIO_PIN_RESET);
 80016e6:	2200      	movs	r2, #0
 80016e8:	210e      	movs	r1, #14
 80016ea:	480f      	ldr	r0, [pc, #60]	; (8001728 <display7SEG+0x118>)
 80016ec:	f000 fd9b 	bl	8002226 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOA, LED_D_Pin |LED_E_Pin|LED_F_Pin|LED_G_Pin, GPIO_PIN_SET);
 80016f0:	2201      	movs	r2, #1
 80016f2:	21f0      	movs	r1, #240	; 0xf0
 80016f4:	480c      	ldr	r0, [pc, #48]	; (8001728 <display7SEG+0x118>)
 80016f6:	f000 fd96 	bl	8002226 <HAL_GPIO_WritePin>
		break;
 80016fa:	e011      	b.n	8001720 <display7SEG+0x110>
	case 8:
		  HAL_GPIO_WritePin(GPIOA, LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 80016fc:	2200      	movs	r2, #0
 80016fe:	21fe      	movs	r1, #254	; 0xfe
 8001700:	4809      	ldr	r0, [pc, #36]	; (8001728 <display7SEG+0x118>)
 8001702:	f000 fd90 	bl	8002226 <HAL_GPIO_WritePin>
		                          |LED_E_Pin|LED_F_Pin|LED_G_Pin, GPIO_PIN_RESET);
		break;
 8001706:	e00b      	b.n	8001720 <display7SEG+0x110>
	case 9:
		  HAL_GPIO_WritePin(GPIOA, LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 8001708:	2200      	movs	r2, #0
 800170a:	21de      	movs	r1, #222	; 0xde
 800170c:	4806      	ldr	r0, [pc, #24]	; (8001728 <display7SEG+0x118>)
 800170e:	f000 fd8a 	bl	8002226 <HAL_GPIO_WritePin>
		                          |LED_F_Pin|LED_G_Pin, GPIO_PIN_RESET);

		  HAL_GPIO_WritePin(GPIOA, LED_E_Pin, GPIO_PIN_SET);
 8001712:	2201      	movs	r2, #1
 8001714:	2120      	movs	r1, #32
 8001716:	4804      	ldr	r0, [pc, #16]	; (8001728 <display7SEG+0x118>)
 8001718:	f000 fd85 	bl	8002226 <HAL_GPIO_WritePin>
		break;
 800171c:	e000      	b.n	8001720 <display7SEG+0x110>
	default:
		break;
 800171e:	bf00      	nop
	}
}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40010800 	.word	0x40010800

0800172c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001730:	f000 fa78 	bl	8001c24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001734:	f000 f80e 	bl	8001754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001738:	f000 f894 	bl	8001864 <MX_GPIO_Init>
  MX_TIM2_Init();
 800173c:	f000 f846 	bl	80017cc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001740:	4803      	ldr	r0, [pc, #12]	; (8001750 <main+0x24>)
 8001742:	f001 f9cd 	bl	8002ae0 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_auto_run();
 8001746:	f7ff f9ff 	bl	8000b48 <fsm_auto_run>
	  fsm_man_run();
 800174a:	f7ff fb19 	bl	8000d80 <fsm_man_run>
	  fsm_auto_run();
 800174e:	e7fa      	b.n	8001746 <main+0x1a>
 8001750:	200000c8 	.word	0x200000c8

08001754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b090      	sub	sp, #64	; 0x40
 8001758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800175a:	f107 0318 	add.w	r3, r7, #24
 800175e:	2228      	movs	r2, #40	; 0x28
 8001760:	2100      	movs	r1, #0
 8001762:	4618      	mov	r0, r3
 8001764:	f001 fd78 	bl	8003258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	609a      	str	r2, [r3, #8]
 8001772:	60da      	str	r2, [r3, #12]
 8001774:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001776:	2302      	movs	r3, #2
 8001778:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800177a:	2301      	movs	r3, #1
 800177c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800177e:	2310      	movs	r3, #16
 8001780:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001782:	2300      	movs	r3, #0
 8001784:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001786:	f107 0318 	add.w	r3, r7, #24
 800178a:	4618      	mov	r0, r3
 800178c:	f000 fd7c 	bl	8002288 <HAL_RCC_OscConfig>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001796:	f000 f8d1 	bl	800193c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800179a:	230f      	movs	r3, #15
 800179c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800179e:	2300      	movs	r3, #0
 80017a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017ae:	1d3b      	adds	r3, r7, #4
 80017b0:	2100      	movs	r1, #0
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 ffe8 	bl	8002788 <HAL_RCC_ClockConfig>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80017be:	f000 f8bd 	bl	800193c <Error_Handler>
  }
}
 80017c2:	bf00      	nop
 80017c4:	3740      	adds	r7, #64	; 0x40
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017d2:	f107 0308 	add.w	r3, r7, #8
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	609a      	str	r2, [r3, #8]
 80017de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e0:	463b      	mov	r3, r7
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017e8:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <MX_TIM2_Init+0x94>)
 80017ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80017f0:	4b1b      	ldr	r3, [pc, #108]	; (8001860 <MX_TIM2_Init+0x94>)
 80017f2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80017f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f8:	4b19      	ldr	r3, [pc, #100]	; (8001860 <MX_TIM2_Init+0x94>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80017fe:	4b18      	ldr	r3, [pc, #96]	; (8001860 <MX_TIM2_Init+0x94>)
 8001800:	2209      	movs	r2, #9
 8001802:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001804:	4b16      	ldr	r3, [pc, #88]	; (8001860 <MX_TIM2_Init+0x94>)
 8001806:	2200      	movs	r2, #0
 8001808:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800180a:	4b15      	ldr	r3, [pc, #84]	; (8001860 <MX_TIM2_Init+0x94>)
 800180c:	2200      	movs	r2, #0
 800180e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001810:	4813      	ldr	r0, [pc, #76]	; (8001860 <MX_TIM2_Init+0x94>)
 8001812:	f001 f915 	bl	8002a40 <HAL_TIM_Base_Init>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800181c:	f000 f88e 	bl	800193c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001824:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001826:	f107 0308 	add.w	r3, r7, #8
 800182a:	4619      	mov	r1, r3
 800182c:	480c      	ldr	r0, [pc, #48]	; (8001860 <MX_TIM2_Init+0x94>)
 800182e:	f001 faab 	bl	8002d88 <HAL_TIM_ConfigClockSource>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001838:	f000 f880 	bl	800193c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183c:	2300      	movs	r3, #0
 800183e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001840:	2300      	movs	r3, #0
 8001842:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001844:	463b      	mov	r3, r7
 8001846:	4619      	mov	r1, r3
 8001848:	4805      	ldr	r0, [pc, #20]	; (8001860 <MX_TIM2_Init+0x94>)
 800184a:	f001 fc77 	bl	800313c <HAL_TIMEx_MasterConfigSynchronization>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001854:	f000 f872 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001858:	bf00      	nop
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	200000c8 	.word	0x200000c8

08001864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186a:	f107 0308 	add.w	r3, r7, #8
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001878:	4b27      	ldr	r3, [pc, #156]	; (8001918 <MX_GPIO_Init+0xb4>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	4a26      	ldr	r2, [pc, #152]	; (8001918 <MX_GPIO_Init+0xb4>)
 800187e:	f043 0304 	orr.w	r3, r3, #4
 8001882:	6193      	str	r3, [r2, #24]
 8001884:	4b24      	ldr	r3, [pc, #144]	; (8001918 <MX_GPIO_Init+0xb4>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	607b      	str	r3, [r7, #4]
 800188e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001890:	4b21      	ldr	r3, [pc, #132]	; (8001918 <MX_GPIO_Init+0xb4>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	4a20      	ldr	r2, [pc, #128]	; (8001918 <MX_GPIO_Init+0xb4>)
 8001896:	f043 0308 	orr.w	r3, r3, #8
 800189a:	6193      	str	r3, [r2, #24]
 800189c:	4b1e      	ldr	r3, [pc, #120]	; (8001918 <MX_GPIO_Init+0xb4>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	f003 0308 	and.w	r3, r3, #8
 80018a4:	603b      	str	r3, [r7, #0]
 80018a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 80018a8:	2200      	movs	r2, #0
 80018aa:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80018ae:	481b      	ldr	r0, [pc, #108]	; (800191c <MX_GPIO_Init+0xb8>)
 80018b0:	f000 fcb9 	bl	8002226 <HAL_GPIO_WritePin>
                          |LED_E_Pin|LED_F_Pin|LED_G_Pin|DIGIT_1_Pin
                          |DIGIT_2_Pin|DIGIT_3_Pin|DIGIT_4_Pin|LED_RED_1_Pin
                          |LED_YELLOW_1_Pin|LED_GREEN_1_Pin|MODE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_2_Pin|LED_YELLOW_2_Pin|LED_GREEN_2_Pin, GPIO_PIN_RESET);
 80018b4:	2200      	movs	r2, #0
 80018b6:	21e0      	movs	r1, #224	; 0xe0
 80018b8:	4819      	ldr	r0, [pc, #100]	; (8001920 <MX_GPIO_Init+0xbc>)
 80018ba:	f000 fcb4 	bl	8002226 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_A_Pin LED_B_Pin LED_C_Pin LED_D_Pin
                           LED_E_Pin LED_F_Pin LED_G_Pin DIGIT_1_Pin
                           DIGIT_2_Pin DIGIT_3_Pin DIGIT_4_Pin LED_RED_1_Pin
                           LED_YELLOW_1_Pin LED_GREEN_1_Pin MODE_Pin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 80018be:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80018c2:	60bb      	str	r3, [r7, #8]
                          |LED_E_Pin|LED_F_Pin|LED_G_Pin|DIGIT_1_Pin
                          |DIGIT_2_Pin|DIGIT_3_Pin|DIGIT_4_Pin|LED_RED_1_Pin
                          |LED_YELLOW_1_Pin|LED_GREEN_1_Pin|MODE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c4:	2301      	movs	r3, #1
 80018c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018cc:	2302      	movs	r3, #2
 80018ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d0:	f107 0308 	add.w	r3, r7, #8
 80018d4:	4619      	mov	r1, r3
 80018d6:	4811      	ldr	r0, [pc, #68]	; (800191c <MX_GPIO_Init+0xb8>)
 80018d8:	f000 fb14 	bl	8001f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 80018dc:	2307      	movs	r3, #7
 80018de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e0:	2300      	movs	r3, #0
 80018e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018e4:	2301      	movs	r3, #1
 80018e6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e8:	f107 0308 	add.w	r3, r7, #8
 80018ec:	4619      	mov	r1, r3
 80018ee:	480c      	ldr	r0, [pc, #48]	; (8001920 <MX_GPIO_Init+0xbc>)
 80018f0:	f000 fb08 	bl	8001f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_2_Pin LED_YELLOW_2_Pin LED_GREEN_2_Pin */
  GPIO_InitStruct.Pin = LED_RED_2_Pin|LED_YELLOW_2_Pin|LED_GREEN_2_Pin;
 80018f4:	23e0      	movs	r3, #224	; 0xe0
 80018f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f8:	2301      	movs	r3, #1
 80018fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001900:	2302      	movs	r3, #2
 8001902:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001904:	f107 0308 	add.w	r3, r7, #8
 8001908:	4619      	mov	r1, r3
 800190a:	4805      	ldr	r0, [pc, #20]	; (8001920 <MX_GPIO_Init+0xbc>)
 800190c:	f000 fafa 	bl	8001f04 <HAL_GPIO_Init>

}
 8001910:	bf00      	nop
 8001912:	3718      	adds	r7, #24
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40021000 	.word	0x40021000
 800191c:	40010800 	.word	0x40010800
 8001920:	40010c00 	.word	0x40010c00

08001924 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	timerRun();
 800192c:	f000 f85c 	bl	80019e8 <timerRun>
	getKeyInput();
 8001930:	f7ff f840 	bl	80009b4 <getKeyInput>
}
 8001934:	bf00      	nop
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001940:	b672      	cpsid	i
}
 8001942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001944:	e7fe      	b.n	8001944 <Error_Handler+0x8>
	...

08001948 <setTimer0>:
int timer3_flag = 0;
int timer4_flag = 0;

int TIMER_CYCLE = 10;

void setTimer0 (int duration){
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
	timer0_counter = duration;
 8001950:	4a05      	ldr	r2, [pc, #20]	; (8001968 <setTimer0+0x20>)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8001956:	4b05      	ldr	r3, [pc, #20]	; (800196c <setTimer0+0x24>)
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	200000a0 	.word	0x200000a0
 800196c:	200000b4 	.word	0x200000b4

08001970 <setTimer1>:

void setTimer1 (int duration){
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	timer1_count = duration;
 8001978:	4a05      	ldr	r2, [pc, #20]	; (8001990 <setTimer1+0x20>)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800197e:	4b05      	ldr	r3, [pc, #20]	; (8001994 <setTimer1+0x24>)
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	bc80      	pop	{r7}
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	200000a4 	.word	0x200000a4
 8001994:	200000b8 	.word	0x200000b8

08001998 <setTimer2>:
void setTimer2 (int duration){
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
	timer2_count = duration;
 80019a0:	4a05      	ldr	r2, [pc, #20]	; (80019b8 <setTimer2+0x20>)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80019a6:	4b05      	ldr	r3, [pc, #20]	; (80019bc <setTimer2+0x24>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	200000a8 	.word	0x200000a8
 80019bc:	200000bc 	.word	0x200000bc

080019c0 <setTimer3>:
void setTimer3 (int duration){
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
	timer3_count = duration;
 80019c8:	4a05      	ldr	r2, [pc, #20]	; (80019e0 <setTimer3+0x20>)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80019ce:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <setTimer3+0x24>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	200000ac 	.word	0x200000ac
 80019e4:	200000c0 	.word	0x200000c0

080019e8 <timerRun>:
void setTimer4 (int duration){
	timer4_count = duration;
	timer4_flag = 0;
}

void timerRun(){
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
	if (timer0_counter > 0){
 80019ec:	4b29      	ldr	r3, [pc, #164]	; (8001a94 <timerRun+0xac>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	dd0b      	ble.n	8001a0c <timerRun+0x24>
		timer0_counter--;
 80019f4:	4b27      	ldr	r3, [pc, #156]	; (8001a94 <timerRun+0xac>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	3b01      	subs	r3, #1
 80019fa:	4a26      	ldr	r2, [pc, #152]	; (8001a94 <timerRun+0xac>)
 80019fc:	6013      	str	r3, [r2, #0]
		if (timer0_counter <= 0){
 80019fe:	4b25      	ldr	r3, [pc, #148]	; (8001a94 <timerRun+0xac>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	dc02      	bgt.n	8001a0c <timerRun+0x24>
			timer0_flag = 1;
 8001a06:	4b24      	ldr	r3, [pc, #144]	; (8001a98 <timerRun+0xb0>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer1_count > 0){
 8001a0c:	4b23      	ldr	r3, [pc, #140]	; (8001a9c <timerRun+0xb4>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	dd0b      	ble.n	8001a2c <timerRun+0x44>
		timer1_count--;
 8001a14:	4b21      	ldr	r3, [pc, #132]	; (8001a9c <timerRun+0xb4>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	4a20      	ldr	r2, [pc, #128]	; (8001a9c <timerRun+0xb4>)
 8001a1c:	6013      	str	r3, [r2, #0]
		if (timer1_count <= 0 ){
 8001a1e:	4b1f      	ldr	r3, [pc, #124]	; (8001a9c <timerRun+0xb4>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	dc02      	bgt.n	8001a2c <timerRun+0x44>
			timer1_flag = 1;
 8001a26:	4b1e      	ldr	r3, [pc, #120]	; (8001aa0 <timerRun+0xb8>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_count > 0){
 8001a2c:	4b1d      	ldr	r3, [pc, #116]	; (8001aa4 <timerRun+0xbc>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	dd0b      	ble.n	8001a4c <timerRun+0x64>
		timer2_count--;
 8001a34:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <timerRun+0xbc>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	4a1a      	ldr	r2, [pc, #104]	; (8001aa4 <timerRun+0xbc>)
 8001a3c:	6013      	str	r3, [r2, #0]
		if (timer2_count <= 0){
 8001a3e:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <timerRun+0xbc>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	dc02      	bgt.n	8001a4c <timerRun+0x64>
			timer2_flag = 1;
 8001a46:	4b18      	ldr	r3, [pc, #96]	; (8001aa8 <timerRun+0xc0>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_count > 0){
 8001a4c:	4b17      	ldr	r3, [pc, #92]	; (8001aac <timerRun+0xc4>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	dd0b      	ble.n	8001a6c <timerRun+0x84>
		timer3_count--;
 8001a54:	4b15      	ldr	r3, [pc, #84]	; (8001aac <timerRun+0xc4>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	4a14      	ldr	r2, [pc, #80]	; (8001aac <timerRun+0xc4>)
 8001a5c:	6013      	str	r3, [r2, #0]
		if (timer3_count <= 0){
 8001a5e:	4b13      	ldr	r3, [pc, #76]	; (8001aac <timerRun+0xc4>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	dc02      	bgt.n	8001a6c <timerRun+0x84>
			timer3_flag = 1;
 8001a66:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <timerRun+0xc8>)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer4_count > 0){
 8001a6c:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <timerRun+0xcc>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	dd0b      	ble.n	8001a8c <timerRun+0xa4>
		timer4_count--;
 8001a74:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <timerRun+0xcc>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	4a0e      	ldr	r2, [pc, #56]	; (8001ab4 <timerRun+0xcc>)
 8001a7c:	6013      	str	r3, [r2, #0]
		if (timer4_count <= 0){
 8001a7e:	4b0d      	ldr	r3, [pc, #52]	; (8001ab4 <timerRun+0xcc>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	dc02      	bgt.n	8001a8c <timerRun+0xa4>
			timer4_flag = 1;
 8001a86:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <timerRun+0xd0>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr
 8001a94:	200000a0 	.word	0x200000a0
 8001a98:	200000b4 	.word	0x200000b4
 8001a9c:	200000a4 	.word	0x200000a4
 8001aa0:	200000b8 	.word	0x200000b8
 8001aa4:	200000a8 	.word	0x200000a8
 8001aa8:	200000bc 	.word	0x200000bc
 8001aac:	200000ac 	.word	0x200000ac
 8001ab0:	200000c0 	.word	0x200000c0
 8001ab4:	200000b0 	.word	0x200000b0
 8001ab8:	200000c4 	.word	0x200000c4

08001abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ac2:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <HAL_MspInit+0x5c>)
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	4a14      	ldr	r2, [pc, #80]	; (8001b18 <HAL_MspInit+0x5c>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	6193      	str	r3, [r2, #24]
 8001ace:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <HAL_MspInit+0x5c>)
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	60bb      	str	r3, [r7, #8]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ada:	4b0f      	ldr	r3, [pc, #60]	; (8001b18 <HAL_MspInit+0x5c>)
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	4a0e      	ldr	r2, [pc, #56]	; (8001b18 <HAL_MspInit+0x5c>)
 8001ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae4:	61d3      	str	r3, [r2, #28]
 8001ae6:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <HAL_MspInit+0x5c>)
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aee:	607b      	str	r3, [r7, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001af2:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <HAL_MspInit+0x60>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	4a04      	ldr	r2, [pc, #16]	; (8001b1c <HAL_MspInit+0x60>)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	3714      	adds	r7, #20
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	40010000 	.word	0x40010000

08001b20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b30:	d113      	bne.n	8001b5a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b32:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <HAL_TIM_Base_MspInit+0x44>)
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	4a0b      	ldr	r2, [pc, #44]	; (8001b64 <HAL_TIM_Base_MspInit+0x44>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	61d3      	str	r3, [r2, #28]
 8001b3e:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <HAL_TIM_Base_MspInit+0x44>)
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	201c      	movs	r0, #28
 8001b50:	f000 f9a1 	bl	8001e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b54:	201c      	movs	r0, #28
 8001b56:	f000 f9ba 	bl	8001ece <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b5a:	bf00      	nop
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40021000 	.word	0x40021000

08001b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <NMI_Handler+0x4>

08001b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b72:	e7fe      	b.n	8001b72 <HardFault_Handler+0x4>

08001b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <MemManage_Handler+0x4>

08001b7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b7e:	e7fe      	b.n	8001b7e <BusFault_Handler+0x4>

08001b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <UsageFault_Handler+0x4>

08001b86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr

08001b92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr

08001b9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr

08001baa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bae:	f000 f87f 	bl	8001cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
	...

08001bb8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bbc:	4802      	ldr	r0, [pc, #8]	; (8001bc8 <TIM2_IRQHandler+0x10>)
 8001bbe:	f000 ffdb 	bl	8002b78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	200000c8 	.word	0x200000c8

08001bcc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr

08001bd8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bd8:	f7ff fff8 	bl	8001bcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bdc:	480b      	ldr	r0, [pc, #44]	; (8001c0c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001bde:	490c      	ldr	r1, [pc, #48]	; (8001c10 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001be0:	4a0c      	ldr	r2, [pc, #48]	; (8001c14 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001be2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001be4:	e002      	b.n	8001bec <LoopCopyDataInit>

08001be6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001be6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001be8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bea:	3304      	adds	r3, #4

08001bec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf0:	d3f9      	bcc.n	8001be6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bf2:	4a09      	ldr	r2, [pc, #36]	; (8001c18 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001bf4:	4c09      	ldr	r4, [pc, #36]	; (8001c1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bf8:	e001      	b.n	8001bfe <LoopFillZerobss>

08001bfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bfc:	3204      	adds	r2, #4

08001bfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c00:	d3fb      	bcc.n	8001bfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c02:	f001 fb05 	bl	8003210 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c06:	f7ff fd91 	bl	800172c <main>
  bx lr
 8001c0a:	4770      	bx	lr
  ldr r0, =_sdata
 8001c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c10:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001c14:	080032ac 	.word	0x080032ac
  ldr r2, =_sbss
 8001c18:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001c1c:	20000114 	.word	0x20000114

08001c20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c20:	e7fe      	b.n	8001c20 <ADC1_2_IRQHandler>
	...

08001c24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c28:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <HAL_Init+0x28>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a07      	ldr	r2, [pc, #28]	; (8001c4c <HAL_Init+0x28>)
 8001c2e:	f043 0310 	orr.w	r3, r3, #16
 8001c32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c34:	2003      	movs	r0, #3
 8001c36:	f000 f923 	bl	8001e80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c3a:	200f      	movs	r0, #15
 8001c3c:	f000 f808 	bl	8001c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c40:	f7ff ff3c 	bl	8001abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40022000 	.word	0x40022000

08001c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c58:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <HAL_InitTick+0x54>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <HAL_InitTick+0x58>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	4619      	mov	r1, r3
 8001c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f000 f93b 	bl	8001eea <HAL_SYSTICK_Config>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e00e      	b.n	8001c9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b0f      	cmp	r3, #15
 8001c82:	d80a      	bhi.n	8001c9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c84:	2200      	movs	r2, #0
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	f04f 30ff 	mov.w	r0, #4294967295
 8001c8c:	f000 f903 	bl	8001e96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c90:	4a06      	ldr	r2, [pc, #24]	; (8001cac <HAL_InitTick+0x5c>)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
 8001c98:	e000      	b.n	8001c9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	20000058 	.word	0x20000058
 8001ca8:	20000060 	.word	0x20000060
 8001cac:	2000005c 	.word	0x2000005c

08001cb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cb4:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <HAL_IncTick+0x1c>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <HAL_IncTick+0x20>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	4a03      	ldr	r2, [pc, #12]	; (8001cd0 <HAL_IncTick+0x20>)
 8001cc2:	6013      	str	r3, [r2, #0]
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr
 8001ccc:	20000060 	.word	0x20000060
 8001cd0:	20000110 	.word	0x20000110

08001cd4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd8:	4b02      	ldr	r3, [pc, #8]	; (8001ce4 <HAL_GetTick+0x10>)
 8001cda:	681b      	ldr	r3, [r3, #0]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr
 8001ce4:	20000110 	.word	0x20000110

08001ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <__NVIC_SetPriorityGrouping+0x44>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cfe:	68ba      	ldr	r2, [r7, #8]
 8001d00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d04:	4013      	ands	r3, r2
 8001d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d1a:	4a04      	ldr	r2, [pc, #16]	; (8001d2c <__NVIC_SetPriorityGrouping+0x44>)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	60d3      	str	r3, [r2, #12]
}
 8001d20:	bf00      	nop
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d34:	4b04      	ldr	r3, [pc, #16]	; (8001d48 <__NVIC_GetPriorityGrouping+0x18>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	0a1b      	lsrs	r3, r3, #8
 8001d3a:	f003 0307 	and.w	r3, r3, #7
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	db0b      	blt.n	8001d76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	f003 021f 	and.w	r2, r3, #31
 8001d64:	4906      	ldr	r1, [pc, #24]	; (8001d80 <__NVIC_EnableIRQ+0x34>)
 8001d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6a:	095b      	lsrs	r3, r3, #5
 8001d6c:	2001      	movs	r0, #1
 8001d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr
 8001d80:	e000e100 	.word	0xe000e100

08001d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	6039      	str	r1, [r7, #0]
 8001d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	db0a      	blt.n	8001dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	490c      	ldr	r1, [pc, #48]	; (8001dd0 <__NVIC_SetPriority+0x4c>)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	0112      	lsls	r2, r2, #4
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	440b      	add	r3, r1
 8001da8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dac:	e00a      	b.n	8001dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	4908      	ldr	r1, [pc, #32]	; (8001dd4 <__NVIC_SetPriority+0x50>)
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	3b04      	subs	r3, #4
 8001dbc:	0112      	lsls	r2, r2, #4
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	761a      	strb	r2, [r3, #24]
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	e000e100 	.word	0xe000e100
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b089      	sub	sp, #36	; 0x24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f1c3 0307 	rsb	r3, r3, #7
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	bf28      	it	cs
 8001df6:	2304      	movcs	r3, #4
 8001df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	2b06      	cmp	r3, #6
 8001e00:	d902      	bls.n	8001e08 <NVIC_EncodePriority+0x30>
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3b03      	subs	r3, #3
 8001e06:	e000      	b.n	8001e0a <NVIC_EncodePriority+0x32>
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43da      	mvns	r2, r3
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e20:	f04f 31ff 	mov.w	r1, #4294967295
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2a:	43d9      	mvns	r1, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e30:	4313      	orrs	r3, r2
         );
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3724      	adds	r7, #36	; 0x24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr

08001e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e4c:	d301      	bcc.n	8001e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e00f      	b.n	8001e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e52:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <SysTick_Config+0x40>)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e5a:	210f      	movs	r1, #15
 8001e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e60:	f7ff ff90 	bl	8001d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <SysTick_Config+0x40>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e6a:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <SysTick_Config+0x40>)
 8001e6c:	2207      	movs	r2, #7
 8001e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	e000e010 	.word	0xe000e010

08001e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7ff ff2d 	bl	8001ce8 <__NVIC_SetPriorityGrouping>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b086      	sub	sp, #24
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
 8001ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ea8:	f7ff ff42 	bl	8001d30 <__NVIC_GetPriorityGrouping>
 8001eac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	68b9      	ldr	r1, [r7, #8]
 8001eb2:	6978      	ldr	r0, [r7, #20]
 8001eb4:	f7ff ff90 	bl	8001dd8 <NVIC_EncodePriority>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ff5f 	bl	8001d84 <__NVIC_SetPriority>
}
 8001ec6:	bf00      	nop
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff35 	bl	8001d4c <__NVIC_EnableIRQ>
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff ffa2 	bl	8001e3c <SysTick_Config>
 8001ef8:	4603      	mov	r3, r0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b08b      	sub	sp, #44	; 0x2c
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f12:	2300      	movs	r3, #0
 8001f14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f16:	e148      	b.n	80021aa <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f18:	2201      	movs	r2, #1
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	69fa      	ldr	r2, [r7, #28]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	f040 8137 	bne.w	80021a4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	4aa3      	ldr	r2, [pc, #652]	; (80021c8 <HAL_GPIO_Init+0x2c4>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d05e      	beq.n	8001ffe <HAL_GPIO_Init+0xfa>
 8001f40:	4aa1      	ldr	r2, [pc, #644]	; (80021c8 <HAL_GPIO_Init+0x2c4>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d875      	bhi.n	8002032 <HAL_GPIO_Init+0x12e>
 8001f46:	4aa1      	ldr	r2, [pc, #644]	; (80021cc <HAL_GPIO_Init+0x2c8>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d058      	beq.n	8001ffe <HAL_GPIO_Init+0xfa>
 8001f4c:	4a9f      	ldr	r2, [pc, #636]	; (80021cc <HAL_GPIO_Init+0x2c8>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d86f      	bhi.n	8002032 <HAL_GPIO_Init+0x12e>
 8001f52:	4a9f      	ldr	r2, [pc, #636]	; (80021d0 <HAL_GPIO_Init+0x2cc>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d052      	beq.n	8001ffe <HAL_GPIO_Init+0xfa>
 8001f58:	4a9d      	ldr	r2, [pc, #628]	; (80021d0 <HAL_GPIO_Init+0x2cc>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d869      	bhi.n	8002032 <HAL_GPIO_Init+0x12e>
 8001f5e:	4a9d      	ldr	r2, [pc, #628]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d04c      	beq.n	8001ffe <HAL_GPIO_Init+0xfa>
 8001f64:	4a9b      	ldr	r2, [pc, #620]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d863      	bhi.n	8002032 <HAL_GPIO_Init+0x12e>
 8001f6a:	4a9b      	ldr	r2, [pc, #620]	; (80021d8 <HAL_GPIO_Init+0x2d4>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d046      	beq.n	8001ffe <HAL_GPIO_Init+0xfa>
 8001f70:	4a99      	ldr	r2, [pc, #612]	; (80021d8 <HAL_GPIO_Init+0x2d4>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d85d      	bhi.n	8002032 <HAL_GPIO_Init+0x12e>
 8001f76:	2b12      	cmp	r3, #18
 8001f78:	d82a      	bhi.n	8001fd0 <HAL_GPIO_Init+0xcc>
 8001f7a:	2b12      	cmp	r3, #18
 8001f7c:	d859      	bhi.n	8002032 <HAL_GPIO_Init+0x12e>
 8001f7e:	a201      	add	r2, pc, #4	; (adr r2, 8001f84 <HAL_GPIO_Init+0x80>)
 8001f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f84:	08001fff 	.word	0x08001fff
 8001f88:	08001fd9 	.word	0x08001fd9
 8001f8c:	08001feb 	.word	0x08001feb
 8001f90:	0800202d 	.word	0x0800202d
 8001f94:	08002033 	.word	0x08002033
 8001f98:	08002033 	.word	0x08002033
 8001f9c:	08002033 	.word	0x08002033
 8001fa0:	08002033 	.word	0x08002033
 8001fa4:	08002033 	.word	0x08002033
 8001fa8:	08002033 	.word	0x08002033
 8001fac:	08002033 	.word	0x08002033
 8001fb0:	08002033 	.word	0x08002033
 8001fb4:	08002033 	.word	0x08002033
 8001fb8:	08002033 	.word	0x08002033
 8001fbc:	08002033 	.word	0x08002033
 8001fc0:	08002033 	.word	0x08002033
 8001fc4:	08002033 	.word	0x08002033
 8001fc8:	08001fe1 	.word	0x08001fe1
 8001fcc:	08001ff5 	.word	0x08001ff5
 8001fd0:	4a82      	ldr	r2, [pc, #520]	; (80021dc <HAL_GPIO_Init+0x2d8>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d013      	beq.n	8001ffe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fd6:	e02c      	b.n	8002032 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	623b      	str	r3, [r7, #32]
          break;
 8001fde:	e029      	b.n	8002034 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	623b      	str	r3, [r7, #32]
          break;
 8001fe8:	e024      	b.n	8002034 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	3308      	adds	r3, #8
 8001ff0:	623b      	str	r3, [r7, #32]
          break;
 8001ff2:	e01f      	b.n	8002034 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	330c      	adds	r3, #12
 8001ffa:	623b      	str	r3, [r7, #32]
          break;
 8001ffc:	e01a      	b.n	8002034 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d102      	bne.n	800200c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002006:	2304      	movs	r3, #4
 8002008:	623b      	str	r3, [r7, #32]
          break;
 800200a:	e013      	b.n	8002034 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d105      	bne.n	8002020 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002014:	2308      	movs	r3, #8
 8002016:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	69fa      	ldr	r2, [r7, #28]
 800201c:	611a      	str	r2, [r3, #16]
          break;
 800201e:	e009      	b.n	8002034 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002020:	2308      	movs	r3, #8
 8002022:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	69fa      	ldr	r2, [r7, #28]
 8002028:	615a      	str	r2, [r3, #20]
          break;
 800202a:	e003      	b.n	8002034 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800202c:	2300      	movs	r3, #0
 800202e:	623b      	str	r3, [r7, #32]
          break;
 8002030:	e000      	b.n	8002034 <HAL_GPIO_Init+0x130>
          break;
 8002032:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	2bff      	cmp	r3, #255	; 0xff
 8002038:	d801      	bhi.n	800203e <HAL_GPIO_Init+0x13a>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	e001      	b.n	8002042 <HAL_GPIO_Init+0x13e>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	3304      	adds	r3, #4
 8002042:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	2bff      	cmp	r3, #255	; 0xff
 8002048:	d802      	bhi.n	8002050 <HAL_GPIO_Init+0x14c>
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	e002      	b.n	8002056 <HAL_GPIO_Init+0x152>
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	3b08      	subs	r3, #8
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	210f      	movs	r1, #15
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	fa01 f303 	lsl.w	r3, r1, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	401a      	ands	r2, r3
 8002068:	6a39      	ldr	r1, [r7, #32]
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	fa01 f303 	lsl.w	r3, r1, r3
 8002070:	431a      	orrs	r2, r3
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 8090 	beq.w	80021a4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002084:	4b56      	ldr	r3, [pc, #344]	; (80021e0 <HAL_GPIO_Init+0x2dc>)
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	4a55      	ldr	r2, [pc, #340]	; (80021e0 <HAL_GPIO_Init+0x2dc>)
 800208a:	f043 0301 	orr.w	r3, r3, #1
 800208e:	6193      	str	r3, [r2, #24]
 8002090:	4b53      	ldr	r3, [pc, #332]	; (80021e0 <HAL_GPIO_Init+0x2dc>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800209c:	4a51      	ldr	r2, [pc, #324]	; (80021e4 <HAL_GPIO_Init+0x2e0>)
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	089b      	lsrs	r3, r3, #2
 80020a2:	3302      	adds	r3, #2
 80020a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	f003 0303 	and.w	r3, r3, #3
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	220f      	movs	r2, #15
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	4013      	ands	r3, r2
 80020be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a49      	ldr	r2, [pc, #292]	; (80021e8 <HAL_GPIO_Init+0x2e4>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d00d      	beq.n	80020e4 <HAL_GPIO_Init+0x1e0>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a48      	ldr	r2, [pc, #288]	; (80021ec <HAL_GPIO_Init+0x2e8>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d007      	beq.n	80020e0 <HAL_GPIO_Init+0x1dc>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a47      	ldr	r2, [pc, #284]	; (80021f0 <HAL_GPIO_Init+0x2ec>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d101      	bne.n	80020dc <HAL_GPIO_Init+0x1d8>
 80020d8:	2302      	movs	r3, #2
 80020da:	e004      	b.n	80020e6 <HAL_GPIO_Init+0x1e2>
 80020dc:	2303      	movs	r3, #3
 80020de:	e002      	b.n	80020e6 <HAL_GPIO_Init+0x1e2>
 80020e0:	2301      	movs	r3, #1
 80020e2:	e000      	b.n	80020e6 <HAL_GPIO_Init+0x1e2>
 80020e4:	2300      	movs	r3, #0
 80020e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020e8:	f002 0203 	and.w	r2, r2, #3
 80020ec:	0092      	lsls	r2, r2, #2
 80020ee:	4093      	lsls	r3, r2
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020f6:	493b      	ldr	r1, [pc, #236]	; (80021e4 <HAL_GPIO_Init+0x2e0>)
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	089b      	lsrs	r3, r3, #2
 80020fc:	3302      	adds	r3, #2
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d006      	beq.n	800211e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002110:	4b38      	ldr	r3, [pc, #224]	; (80021f4 <HAL_GPIO_Init+0x2f0>)
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	4937      	ldr	r1, [pc, #220]	; (80021f4 <HAL_GPIO_Init+0x2f0>)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	4313      	orrs	r3, r2
 800211a:	608b      	str	r3, [r1, #8]
 800211c:	e006      	b.n	800212c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800211e:	4b35      	ldr	r3, [pc, #212]	; (80021f4 <HAL_GPIO_Init+0x2f0>)
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	43db      	mvns	r3, r3
 8002126:	4933      	ldr	r1, [pc, #204]	; (80021f4 <HAL_GPIO_Init+0x2f0>)
 8002128:	4013      	ands	r3, r2
 800212a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d006      	beq.n	8002146 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002138:	4b2e      	ldr	r3, [pc, #184]	; (80021f4 <HAL_GPIO_Init+0x2f0>)
 800213a:	68da      	ldr	r2, [r3, #12]
 800213c:	492d      	ldr	r1, [pc, #180]	; (80021f4 <HAL_GPIO_Init+0x2f0>)
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	4313      	orrs	r3, r2
 8002142:	60cb      	str	r3, [r1, #12]
 8002144:	e006      	b.n	8002154 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002146:	4b2b      	ldr	r3, [pc, #172]	; (80021f4 <HAL_GPIO_Init+0x2f0>)
 8002148:	68da      	ldr	r2, [r3, #12]
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	43db      	mvns	r3, r3
 800214e:	4929      	ldr	r1, [pc, #164]	; (80021f4 <HAL_GPIO_Init+0x2f0>)
 8002150:	4013      	ands	r3, r2
 8002152:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d006      	beq.n	800216e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002160:	4b24      	ldr	r3, [pc, #144]	; (80021f4 <HAL_GPIO_Init+0x2f0>)
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	4923      	ldr	r1, [pc, #140]	; (80021f4 <HAL_GPIO_Init+0x2f0>)
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	4313      	orrs	r3, r2
 800216a:	604b      	str	r3, [r1, #4]
 800216c:	e006      	b.n	800217c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800216e:	4b21      	ldr	r3, [pc, #132]	; (80021f4 <HAL_GPIO_Init+0x2f0>)
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	43db      	mvns	r3, r3
 8002176:	491f      	ldr	r1, [pc, #124]	; (80021f4 <HAL_GPIO_Init+0x2f0>)
 8002178:	4013      	ands	r3, r2
 800217a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d006      	beq.n	8002196 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002188:	4b1a      	ldr	r3, [pc, #104]	; (80021f4 <HAL_GPIO_Init+0x2f0>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4919      	ldr	r1, [pc, #100]	; (80021f4 <HAL_GPIO_Init+0x2f0>)
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	4313      	orrs	r3, r2
 8002192:	600b      	str	r3, [r1, #0]
 8002194:	e006      	b.n	80021a4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002196:	4b17      	ldr	r3, [pc, #92]	; (80021f4 <HAL_GPIO_Init+0x2f0>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	43db      	mvns	r3, r3
 800219e:	4915      	ldr	r1, [pc, #84]	; (80021f4 <HAL_GPIO_Init+0x2f0>)
 80021a0:	4013      	ands	r3, r2
 80021a2:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	3301      	adds	r3, #1
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	fa22 f303 	lsr.w	r3, r2, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f47f aeaf 	bne.w	8001f18 <HAL_GPIO_Init+0x14>
  }
}
 80021ba:	bf00      	nop
 80021bc:	bf00      	nop
 80021be:	372c      	adds	r7, #44	; 0x2c
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	10320000 	.word	0x10320000
 80021cc:	10310000 	.word	0x10310000
 80021d0:	10220000 	.word	0x10220000
 80021d4:	10210000 	.word	0x10210000
 80021d8:	10120000 	.word	0x10120000
 80021dc:	10110000 	.word	0x10110000
 80021e0:	40021000 	.word	0x40021000
 80021e4:	40010000 	.word	0x40010000
 80021e8:	40010800 	.word	0x40010800
 80021ec:	40010c00 	.word	0x40010c00
 80021f0:	40011000 	.word	0x40011000
 80021f4:	40010400 	.word	0x40010400

080021f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	887b      	ldrh	r3, [r7, #2]
 800220a:	4013      	ands	r3, r2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d002      	beq.n	8002216 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002210:	2301      	movs	r3, #1
 8002212:	73fb      	strb	r3, [r7, #15]
 8002214:	e001      	b.n	800221a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002216:	2300      	movs	r3, #0
 8002218:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800221a:	7bfb      	ldrb	r3, [r7, #15]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr

08002226 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	460b      	mov	r3, r1
 8002230:	807b      	strh	r3, [r7, #2]
 8002232:	4613      	mov	r3, r2
 8002234:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002236:	787b      	ldrb	r3, [r7, #1]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d003      	beq.n	8002244 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800223c:	887a      	ldrh	r2, [r7, #2]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002242:	e003      	b.n	800224c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002244:	887b      	ldrh	r3, [r7, #2]
 8002246:	041a      	lsls	r2, r3, #16
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	611a      	str	r2, [r3, #16]
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr

08002256 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002256:	b480      	push	{r7}
 8002258:	b085      	sub	sp, #20
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
 800225e:	460b      	mov	r3, r1
 8002260:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002268:	887a      	ldrh	r2, [r7, #2]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	4013      	ands	r3, r2
 800226e:	041a      	lsls	r2, r3, #16
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	43d9      	mvns	r1, r3
 8002274:	887b      	ldrh	r3, [r7, #2]
 8002276:	400b      	ands	r3, r1
 8002278:	431a      	orrs	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	611a      	str	r2, [r3, #16]
}
 800227e:	bf00      	nop
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr

08002288 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e26c      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 8087 	beq.w	80023b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022a8:	4b92      	ldr	r3, [pc, #584]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 030c 	and.w	r3, r3, #12
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d00c      	beq.n	80022ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022b4:	4b8f      	ldr	r3, [pc, #572]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 030c 	and.w	r3, r3, #12
 80022bc:	2b08      	cmp	r3, #8
 80022be:	d112      	bne.n	80022e6 <HAL_RCC_OscConfig+0x5e>
 80022c0:	4b8c      	ldr	r3, [pc, #560]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022cc:	d10b      	bne.n	80022e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ce:	4b89      	ldr	r3, [pc, #548]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d06c      	beq.n	80023b4 <HAL_RCC_OscConfig+0x12c>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d168      	bne.n	80023b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e246      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ee:	d106      	bne.n	80022fe <HAL_RCC_OscConfig+0x76>
 80022f0:	4b80      	ldr	r3, [pc, #512]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a7f      	ldr	r2, [pc, #508]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80022f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022fa:	6013      	str	r3, [r2, #0]
 80022fc:	e02e      	b.n	800235c <HAL_RCC_OscConfig+0xd4>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10c      	bne.n	8002320 <HAL_RCC_OscConfig+0x98>
 8002306:	4b7b      	ldr	r3, [pc, #492]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a7a      	ldr	r2, [pc, #488]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 800230c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	4b78      	ldr	r3, [pc, #480]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a77      	ldr	r2, [pc, #476]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002318:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	e01d      	b.n	800235c <HAL_RCC_OscConfig+0xd4>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002328:	d10c      	bne.n	8002344 <HAL_RCC_OscConfig+0xbc>
 800232a:	4b72      	ldr	r3, [pc, #456]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a71      	ldr	r2, [pc, #452]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	4b6f      	ldr	r3, [pc, #444]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a6e      	ldr	r2, [pc, #440]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 800233c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	e00b      	b.n	800235c <HAL_RCC_OscConfig+0xd4>
 8002344:	4b6b      	ldr	r3, [pc, #428]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a6a      	ldr	r2, [pc, #424]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 800234a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800234e:	6013      	str	r3, [r2, #0]
 8002350:	4b68      	ldr	r3, [pc, #416]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a67      	ldr	r2, [pc, #412]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800235a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d013      	beq.n	800238c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002364:	f7ff fcb6 	bl	8001cd4 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800236c:	f7ff fcb2 	bl	8001cd4 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b64      	cmp	r3, #100	; 0x64
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e1fa      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237e:	4b5d      	ldr	r3, [pc, #372]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0f0      	beq.n	800236c <HAL_RCC_OscConfig+0xe4>
 800238a:	e014      	b.n	80023b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238c:	f7ff fca2 	bl	8001cd4 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002394:	f7ff fc9e 	bl	8001cd4 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b64      	cmp	r3, #100	; 0x64
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e1e6      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023a6:	4b53      	ldr	r3, [pc, #332]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f0      	bne.n	8002394 <HAL_RCC_OscConfig+0x10c>
 80023b2:	e000      	b.n	80023b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d063      	beq.n	800248a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023c2:	4b4c      	ldr	r3, [pc, #304]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f003 030c 	and.w	r3, r3, #12
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00b      	beq.n	80023e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023ce:	4b49      	ldr	r3, [pc, #292]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f003 030c 	and.w	r3, r3, #12
 80023d6:	2b08      	cmp	r3, #8
 80023d8:	d11c      	bne.n	8002414 <HAL_RCC_OscConfig+0x18c>
 80023da:	4b46      	ldr	r3, [pc, #280]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d116      	bne.n	8002414 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023e6:	4b43      	ldr	r3, [pc, #268]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d005      	beq.n	80023fe <HAL_RCC_OscConfig+0x176>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d001      	beq.n	80023fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e1ba      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023fe:	4b3d      	ldr	r3, [pc, #244]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	4939      	ldr	r1, [pc, #228]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 800240e:	4313      	orrs	r3, r2
 8002410:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002412:	e03a      	b.n	800248a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d020      	beq.n	800245e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800241c:	4b36      	ldr	r3, [pc, #216]	; (80024f8 <HAL_RCC_OscConfig+0x270>)
 800241e:	2201      	movs	r2, #1
 8002420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002422:	f7ff fc57 	bl	8001cd4 <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800242a:	f7ff fc53 	bl	8001cd4 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e19b      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243c:	4b2d      	ldr	r3, [pc, #180]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0f0      	beq.n	800242a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002448:	4b2a      	ldr	r3, [pc, #168]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	4927      	ldr	r1, [pc, #156]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002458:	4313      	orrs	r3, r2
 800245a:	600b      	str	r3, [r1, #0]
 800245c:	e015      	b.n	800248a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800245e:	4b26      	ldr	r3, [pc, #152]	; (80024f8 <HAL_RCC_OscConfig+0x270>)
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002464:	f7ff fc36 	bl	8001cd4 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800246c:	f7ff fc32 	bl	8001cd4 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e17a      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800247e:	4b1d      	ldr	r3, [pc, #116]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d03a      	beq.n	800250c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d019      	beq.n	80024d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800249e:	4b17      	ldr	r3, [pc, #92]	; (80024fc <HAL_RCC_OscConfig+0x274>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a4:	f7ff fc16 	bl	8001cd4 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ac:	f7ff fc12 	bl	8001cd4 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e15a      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024be:	4b0d      	ldr	r3, [pc, #52]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0f0      	beq.n	80024ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024ca:	2001      	movs	r0, #1
 80024cc:	f000 fa9a 	bl	8002a04 <RCC_Delay>
 80024d0:	e01c      	b.n	800250c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024d2:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <HAL_RCC_OscConfig+0x274>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d8:	f7ff fbfc 	bl	8001cd4 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024de:	e00f      	b.n	8002500 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024e0:	f7ff fbf8 	bl	8001cd4 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d908      	bls.n	8002500 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e140      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
 80024f2:	bf00      	nop
 80024f4:	40021000 	.word	0x40021000
 80024f8:	42420000 	.word	0x42420000
 80024fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002500:	4b9e      	ldr	r3, [pc, #632]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1e9      	bne.n	80024e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 80a6 	beq.w	8002666 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800251a:	2300      	movs	r3, #0
 800251c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800251e:	4b97      	ldr	r3, [pc, #604]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10d      	bne.n	8002546 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800252a:	4b94      	ldr	r3, [pc, #592]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	4a93      	ldr	r2, [pc, #588]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 8002530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002534:	61d3      	str	r3, [r2, #28]
 8002536:	4b91      	ldr	r3, [pc, #580]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253e:	60bb      	str	r3, [r7, #8]
 8002540:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002542:	2301      	movs	r3, #1
 8002544:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002546:	4b8e      	ldr	r3, [pc, #568]	; (8002780 <HAL_RCC_OscConfig+0x4f8>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254e:	2b00      	cmp	r3, #0
 8002550:	d118      	bne.n	8002584 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002552:	4b8b      	ldr	r3, [pc, #556]	; (8002780 <HAL_RCC_OscConfig+0x4f8>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a8a      	ldr	r2, [pc, #552]	; (8002780 <HAL_RCC_OscConfig+0x4f8>)
 8002558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800255c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800255e:	f7ff fbb9 	bl	8001cd4 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002566:	f7ff fbb5 	bl	8001cd4 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b64      	cmp	r3, #100	; 0x64
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e0fd      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002578:	4b81      	ldr	r3, [pc, #516]	; (8002780 <HAL_RCC_OscConfig+0x4f8>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0f0      	beq.n	8002566 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d106      	bne.n	800259a <HAL_RCC_OscConfig+0x312>
 800258c:	4b7b      	ldr	r3, [pc, #492]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	4a7a      	ldr	r2, [pc, #488]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 8002592:	f043 0301 	orr.w	r3, r3, #1
 8002596:	6213      	str	r3, [r2, #32]
 8002598:	e02d      	b.n	80025f6 <HAL_RCC_OscConfig+0x36e>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10c      	bne.n	80025bc <HAL_RCC_OscConfig+0x334>
 80025a2:	4b76      	ldr	r3, [pc, #472]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	4a75      	ldr	r2, [pc, #468]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80025a8:	f023 0301 	bic.w	r3, r3, #1
 80025ac:	6213      	str	r3, [r2, #32]
 80025ae:	4b73      	ldr	r3, [pc, #460]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	4a72      	ldr	r2, [pc, #456]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80025b4:	f023 0304 	bic.w	r3, r3, #4
 80025b8:	6213      	str	r3, [r2, #32]
 80025ba:	e01c      	b.n	80025f6 <HAL_RCC_OscConfig+0x36e>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	2b05      	cmp	r3, #5
 80025c2:	d10c      	bne.n	80025de <HAL_RCC_OscConfig+0x356>
 80025c4:	4b6d      	ldr	r3, [pc, #436]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	4a6c      	ldr	r2, [pc, #432]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80025ca:	f043 0304 	orr.w	r3, r3, #4
 80025ce:	6213      	str	r3, [r2, #32]
 80025d0:	4b6a      	ldr	r3, [pc, #424]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	4a69      	ldr	r2, [pc, #420]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	6213      	str	r3, [r2, #32]
 80025dc:	e00b      	b.n	80025f6 <HAL_RCC_OscConfig+0x36e>
 80025de:	4b67      	ldr	r3, [pc, #412]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	4a66      	ldr	r2, [pc, #408]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80025e4:	f023 0301 	bic.w	r3, r3, #1
 80025e8:	6213      	str	r3, [r2, #32]
 80025ea:	4b64      	ldr	r3, [pc, #400]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	4a63      	ldr	r2, [pc, #396]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80025f0:	f023 0304 	bic.w	r3, r3, #4
 80025f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d015      	beq.n	800262a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025fe:	f7ff fb69 	bl	8001cd4 <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002604:	e00a      	b.n	800261c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002606:	f7ff fb65 	bl	8001cd4 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	f241 3288 	movw	r2, #5000	; 0x1388
 8002614:	4293      	cmp	r3, r2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e0ab      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800261c:	4b57      	ldr	r3, [pc, #348]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0ee      	beq.n	8002606 <HAL_RCC_OscConfig+0x37e>
 8002628:	e014      	b.n	8002654 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800262a:	f7ff fb53 	bl	8001cd4 <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002630:	e00a      	b.n	8002648 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002632:	f7ff fb4f 	bl	8001cd4 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002640:	4293      	cmp	r3, r2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e095      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002648:	4b4c      	ldr	r3, [pc, #304]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1ee      	bne.n	8002632 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002654:	7dfb      	ldrb	r3, [r7, #23]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d105      	bne.n	8002666 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800265a:	4b48      	ldr	r3, [pc, #288]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	4a47      	ldr	r2, [pc, #284]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 8002660:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002664:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	2b00      	cmp	r3, #0
 800266c:	f000 8081 	beq.w	8002772 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002670:	4b42      	ldr	r3, [pc, #264]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f003 030c 	and.w	r3, r3, #12
 8002678:	2b08      	cmp	r3, #8
 800267a:	d061      	beq.n	8002740 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	2b02      	cmp	r3, #2
 8002682:	d146      	bne.n	8002712 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002684:	4b3f      	ldr	r3, [pc, #252]	; (8002784 <HAL_RCC_OscConfig+0x4fc>)
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268a:	f7ff fb23 	bl	8001cd4 <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002690:	e008      	b.n	80026a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002692:	f7ff fb1f 	bl	8001cd4 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e067      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a4:	4b35      	ldr	r3, [pc, #212]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1f0      	bne.n	8002692 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b8:	d108      	bne.n	80026cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026ba:	4b30      	ldr	r3, [pc, #192]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	492d      	ldr	r1, [pc, #180]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026cc:	4b2b      	ldr	r3, [pc, #172]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a19      	ldr	r1, [r3, #32]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	430b      	orrs	r3, r1
 80026de:	4927      	ldr	r1, [pc, #156]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026e4:	4b27      	ldr	r3, [pc, #156]	; (8002784 <HAL_RCC_OscConfig+0x4fc>)
 80026e6:	2201      	movs	r2, #1
 80026e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ea:	f7ff faf3 	bl	8001cd4 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f2:	f7ff faef 	bl	8001cd4 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e037      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002704:	4b1d      	ldr	r3, [pc, #116]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0f0      	beq.n	80026f2 <HAL_RCC_OscConfig+0x46a>
 8002710:	e02f      	b.n	8002772 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002712:	4b1c      	ldr	r3, [pc, #112]	; (8002784 <HAL_RCC_OscConfig+0x4fc>)
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002718:	f7ff fadc 	bl	8001cd4 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002720:	f7ff fad8 	bl	8001cd4 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e020      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002732:	4b12      	ldr	r3, [pc, #72]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1f0      	bne.n	8002720 <HAL_RCC_OscConfig+0x498>
 800273e:	e018      	b.n	8002772 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d101      	bne.n	800274c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e013      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800274c:	4b0b      	ldr	r3, [pc, #44]	; (800277c <HAL_RCC_OscConfig+0x4f4>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	429a      	cmp	r2, r3
 800275e:	d106      	bne.n	800276e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800276a:	429a      	cmp	r2, r3
 800276c:	d001      	beq.n	8002772 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40021000 	.word	0x40021000
 8002780:	40007000 	.word	0x40007000
 8002784:	42420060 	.word	0x42420060

08002788 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e0d0      	b.n	800293e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800279c:	4b6a      	ldr	r3, [pc, #424]	; (8002948 <HAL_RCC_ClockConfig+0x1c0>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d910      	bls.n	80027cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027aa:	4b67      	ldr	r3, [pc, #412]	; (8002948 <HAL_RCC_ClockConfig+0x1c0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f023 0207 	bic.w	r2, r3, #7
 80027b2:	4965      	ldr	r1, [pc, #404]	; (8002948 <HAL_RCC_ClockConfig+0x1c0>)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ba:	4b63      	ldr	r3, [pc, #396]	; (8002948 <HAL_RCC_ClockConfig+0x1c0>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d001      	beq.n	80027cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e0b8      	b.n	800293e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d020      	beq.n	800281a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027e4:	4b59      	ldr	r3, [pc, #356]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	4a58      	ldr	r2, [pc, #352]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 80027ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0308 	and.w	r3, r3, #8
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d005      	beq.n	8002808 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027fc:	4b53      	ldr	r3, [pc, #332]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	4a52      	ldr	r2, [pc, #328]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002802:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002806:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002808:	4b50      	ldr	r3, [pc, #320]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	494d      	ldr	r1, [pc, #308]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002816:	4313      	orrs	r3, r2
 8002818:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d040      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d107      	bne.n	800283e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282e:	4b47      	ldr	r3, [pc, #284]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d115      	bne.n	8002866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e07f      	b.n	800293e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b02      	cmp	r3, #2
 8002844:	d107      	bne.n	8002856 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002846:	4b41      	ldr	r3, [pc, #260]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d109      	bne.n	8002866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e073      	b.n	800293e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002856:	4b3d      	ldr	r3, [pc, #244]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e06b      	b.n	800293e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002866:	4b39      	ldr	r3, [pc, #228]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f023 0203 	bic.w	r2, r3, #3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	4936      	ldr	r1, [pc, #216]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002874:	4313      	orrs	r3, r2
 8002876:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002878:	f7ff fa2c 	bl	8001cd4 <HAL_GetTick>
 800287c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287e:	e00a      	b.n	8002896 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002880:	f7ff fa28 	bl	8001cd4 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	f241 3288 	movw	r2, #5000	; 0x1388
 800288e:	4293      	cmp	r3, r2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e053      	b.n	800293e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002896:	4b2d      	ldr	r3, [pc, #180]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f003 020c 	and.w	r2, r3, #12
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d1eb      	bne.n	8002880 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028a8:	4b27      	ldr	r3, [pc, #156]	; (8002948 <HAL_RCC_ClockConfig+0x1c0>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d210      	bcs.n	80028d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b6:	4b24      	ldr	r3, [pc, #144]	; (8002948 <HAL_RCC_ClockConfig+0x1c0>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f023 0207 	bic.w	r2, r3, #7
 80028be:	4922      	ldr	r1, [pc, #136]	; (8002948 <HAL_RCC_ClockConfig+0x1c0>)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c6:	4b20      	ldr	r3, [pc, #128]	; (8002948 <HAL_RCC_ClockConfig+0x1c0>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d001      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e032      	b.n	800293e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d008      	beq.n	80028f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028e4:	4b19      	ldr	r3, [pc, #100]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	4916      	ldr	r1, [pc, #88]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d009      	beq.n	8002916 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002902:	4b12      	ldr	r3, [pc, #72]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	490e      	ldr	r1, [pc, #56]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002912:	4313      	orrs	r3, r2
 8002914:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002916:	f000 f821 	bl	800295c <HAL_RCC_GetSysClockFreq>
 800291a:	4602      	mov	r2, r0
 800291c:	4b0b      	ldr	r3, [pc, #44]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	091b      	lsrs	r3, r3, #4
 8002922:	f003 030f 	and.w	r3, r3, #15
 8002926:	490a      	ldr	r1, [pc, #40]	; (8002950 <HAL_RCC_ClockConfig+0x1c8>)
 8002928:	5ccb      	ldrb	r3, [r1, r3]
 800292a:	fa22 f303 	lsr.w	r3, r2, r3
 800292e:	4a09      	ldr	r2, [pc, #36]	; (8002954 <HAL_RCC_ClockConfig+0x1cc>)
 8002930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002932:	4b09      	ldr	r3, [pc, #36]	; (8002958 <HAL_RCC_ClockConfig+0x1d0>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff f98a 	bl	8001c50 <HAL_InitTick>

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40022000 	.word	0x40022000
 800294c:	40021000 	.word	0x40021000
 8002950:	08003280 	.word	0x08003280
 8002954:	20000058 	.word	0x20000058
 8002958:	2000005c 	.word	0x2000005c

0800295c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800295c:	b480      	push	{r7}
 800295e:	b087      	sub	sp, #28
 8002960:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	2300      	movs	r3, #0
 8002968:	60bb      	str	r3, [r7, #8]
 800296a:	2300      	movs	r3, #0
 800296c:	617b      	str	r3, [r7, #20]
 800296e:	2300      	movs	r3, #0
 8002970:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002972:	2300      	movs	r3, #0
 8002974:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002976:	4b1e      	ldr	r3, [pc, #120]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f003 030c 	and.w	r3, r3, #12
 8002982:	2b04      	cmp	r3, #4
 8002984:	d002      	beq.n	800298c <HAL_RCC_GetSysClockFreq+0x30>
 8002986:	2b08      	cmp	r3, #8
 8002988:	d003      	beq.n	8002992 <HAL_RCC_GetSysClockFreq+0x36>
 800298a:	e027      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800298c:	4b19      	ldr	r3, [pc, #100]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800298e:	613b      	str	r3, [r7, #16]
      break;
 8002990:	e027      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	0c9b      	lsrs	r3, r3, #18
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	4a17      	ldr	r2, [pc, #92]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800299c:	5cd3      	ldrb	r3, [r2, r3]
 800299e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d010      	beq.n	80029cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029aa:	4b11      	ldr	r3, [pc, #68]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	0c5b      	lsrs	r3, r3, #17
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	4a11      	ldr	r2, [pc, #68]	; (80029fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80029b6:	5cd3      	ldrb	r3, [r2, r3]
 80029b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a0d      	ldr	r2, [pc, #52]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80029be:	fb02 f203 	mul.w	r2, r2, r3
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c8:	617b      	str	r3, [r7, #20]
 80029ca:	e004      	b.n	80029d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a0c      	ldr	r2, [pc, #48]	; (8002a00 <HAL_RCC_GetSysClockFreq+0xa4>)
 80029d0:	fb02 f303 	mul.w	r3, r2, r3
 80029d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	613b      	str	r3, [r7, #16]
      break;
 80029da:	e002      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029dc:	4b05      	ldr	r3, [pc, #20]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80029de:	613b      	str	r3, [r7, #16]
      break;
 80029e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029e2:	693b      	ldr	r3, [r7, #16]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	371c      	adds	r7, #28
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40021000 	.word	0x40021000
 80029f4:	007a1200 	.word	0x007a1200
 80029f8:	08003290 	.word	0x08003290
 80029fc:	080032a0 	.word	0x080032a0
 8002a00:	003d0900 	.word	0x003d0900

08002a04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a0c:	4b0a      	ldr	r3, [pc, #40]	; (8002a38 <RCC_Delay+0x34>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a0a      	ldr	r2, [pc, #40]	; (8002a3c <RCC_Delay+0x38>)
 8002a12:	fba2 2303 	umull	r2, r3, r2, r3
 8002a16:	0a5b      	lsrs	r3, r3, #9
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	fb02 f303 	mul.w	r3, r2, r3
 8002a1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a20:	bf00      	nop
  }
  while (Delay --);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	1e5a      	subs	r2, r3, #1
 8002a26:	60fa      	str	r2, [r7, #12]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1f9      	bne.n	8002a20 <RCC_Delay+0x1c>
}
 8002a2c:	bf00      	nop
 8002a2e:	bf00      	nop
 8002a30:	3714      	adds	r7, #20
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr
 8002a38:	20000058 	.word	0x20000058
 8002a3c:	10624dd3 	.word	0x10624dd3

08002a40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e041      	b.n	8002ad6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d106      	bne.n	8002a6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7ff f85a 	bl	8001b20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2202      	movs	r2, #2
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3304      	adds	r3, #4
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4610      	mov	r0, r2
 8002a80:	f000 fa6e 	bl	8002f60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
	...

08002ae0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d001      	beq.n	8002af8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e035      	b.n	8002b64 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2202      	movs	r2, #2
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68da      	ldr	r2, [r3, #12]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f042 0201 	orr.w	r2, r2, #1
 8002b0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a16      	ldr	r2, [pc, #88]	; (8002b70 <HAL_TIM_Base_Start_IT+0x90>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d009      	beq.n	8002b2e <HAL_TIM_Base_Start_IT+0x4e>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b22:	d004      	beq.n	8002b2e <HAL_TIM_Base_Start_IT+0x4e>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a12      	ldr	r2, [pc, #72]	; (8002b74 <HAL_TIM_Base_Start_IT+0x94>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d111      	bne.n	8002b52 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2b06      	cmp	r3, #6
 8002b3e:	d010      	beq.n	8002b62 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 0201 	orr.w	r2, r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b50:	e007      	b.n	8002b62 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f042 0201 	orr.w	r2, r2, #1
 8002b60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	40012c00 	.word	0x40012c00
 8002b74:	40000400 	.word	0x40000400

08002b78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d122      	bne.n	8002bd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d11b      	bne.n	8002bd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f06f 0202 	mvn.w	r2, #2
 8002ba4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f9b4 	bl	8002f28 <HAL_TIM_IC_CaptureCallback>
 8002bc0:	e005      	b.n	8002bce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f9a7 	bl	8002f16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f9b6 	bl	8002f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	f003 0304 	and.w	r3, r3, #4
 8002bde:	2b04      	cmp	r3, #4
 8002be0:	d122      	bne.n	8002c28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b04      	cmp	r3, #4
 8002bee:	d11b      	bne.n	8002c28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f06f 0204 	mvn.w	r2, #4
 8002bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 f98a 	bl	8002f28 <HAL_TIM_IC_CaptureCallback>
 8002c14:	e005      	b.n	8002c22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f97d 	bl	8002f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 f98c 	bl	8002f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	2b08      	cmp	r3, #8
 8002c34:	d122      	bne.n	8002c7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f003 0308 	and.w	r3, r3, #8
 8002c40:	2b08      	cmp	r3, #8
 8002c42:	d11b      	bne.n	8002c7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f06f 0208 	mvn.w	r2, #8
 8002c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2204      	movs	r2, #4
 8002c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	f003 0303 	and.w	r3, r3, #3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f960 	bl	8002f28 <HAL_TIM_IC_CaptureCallback>
 8002c68:	e005      	b.n	8002c76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 f953 	bl	8002f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 f962 	bl	8002f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	f003 0310 	and.w	r3, r3, #16
 8002c86:	2b10      	cmp	r3, #16
 8002c88:	d122      	bne.n	8002cd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	f003 0310 	and.w	r3, r3, #16
 8002c94:	2b10      	cmp	r3, #16
 8002c96:	d11b      	bne.n	8002cd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f06f 0210 	mvn.w	r2, #16
 8002ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2208      	movs	r2, #8
 8002ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f936 	bl	8002f28 <HAL_TIM_IC_CaptureCallback>
 8002cbc:	e005      	b.n	8002cca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f929 	bl	8002f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 f938 	bl	8002f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d10e      	bne.n	8002cfc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d107      	bne.n	8002cfc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f06f 0201 	mvn.w	r2, #1
 8002cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7fe fe14 	bl	8001924 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d06:	2b80      	cmp	r3, #128	; 0x80
 8002d08:	d10e      	bne.n	8002d28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d14:	2b80      	cmp	r3, #128	; 0x80
 8002d16:	d107      	bne.n	8002d28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 fa6b 	bl	80031fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d32:	2b40      	cmp	r3, #64	; 0x40
 8002d34:	d10e      	bne.n	8002d54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d40:	2b40      	cmp	r3, #64	; 0x40
 8002d42:	d107      	bne.n	8002d54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 f8fc 	bl	8002f4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	f003 0320 	and.w	r3, r3, #32
 8002d5e:	2b20      	cmp	r3, #32
 8002d60:	d10e      	bne.n	8002d80 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	f003 0320 	and.w	r3, r3, #32
 8002d6c:	2b20      	cmp	r3, #32
 8002d6e:	d107      	bne.n	8002d80 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f06f 0220 	mvn.w	r2, #32
 8002d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 fa36 	bl	80031ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d80:	bf00      	nop
 8002d82:	3708      	adds	r7, #8
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d92:	2300      	movs	r3, #0
 8002d94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d101      	bne.n	8002da4 <HAL_TIM_ConfigClockSource+0x1c>
 8002da0:	2302      	movs	r3, #2
 8002da2:	e0b4      	b.n	8002f0e <HAL_TIM_ConfigClockSource+0x186>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2202      	movs	r2, #2
 8002db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002dc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ddc:	d03e      	beq.n	8002e5c <HAL_TIM_ConfigClockSource+0xd4>
 8002dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002de2:	f200 8087 	bhi.w	8002ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8002de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dea:	f000 8086 	beq.w	8002efa <HAL_TIM_ConfigClockSource+0x172>
 8002dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002df2:	d87f      	bhi.n	8002ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8002df4:	2b70      	cmp	r3, #112	; 0x70
 8002df6:	d01a      	beq.n	8002e2e <HAL_TIM_ConfigClockSource+0xa6>
 8002df8:	2b70      	cmp	r3, #112	; 0x70
 8002dfa:	d87b      	bhi.n	8002ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8002dfc:	2b60      	cmp	r3, #96	; 0x60
 8002dfe:	d050      	beq.n	8002ea2 <HAL_TIM_ConfigClockSource+0x11a>
 8002e00:	2b60      	cmp	r3, #96	; 0x60
 8002e02:	d877      	bhi.n	8002ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8002e04:	2b50      	cmp	r3, #80	; 0x50
 8002e06:	d03c      	beq.n	8002e82 <HAL_TIM_ConfigClockSource+0xfa>
 8002e08:	2b50      	cmp	r3, #80	; 0x50
 8002e0a:	d873      	bhi.n	8002ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8002e0c:	2b40      	cmp	r3, #64	; 0x40
 8002e0e:	d058      	beq.n	8002ec2 <HAL_TIM_ConfigClockSource+0x13a>
 8002e10:	2b40      	cmp	r3, #64	; 0x40
 8002e12:	d86f      	bhi.n	8002ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8002e14:	2b30      	cmp	r3, #48	; 0x30
 8002e16:	d064      	beq.n	8002ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8002e18:	2b30      	cmp	r3, #48	; 0x30
 8002e1a:	d86b      	bhi.n	8002ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8002e1c:	2b20      	cmp	r3, #32
 8002e1e:	d060      	beq.n	8002ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8002e20:	2b20      	cmp	r3, #32
 8002e22:	d867      	bhi.n	8002ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d05c      	beq.n	8002ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8002e28:	2b10      	cmp	r3, #16
 8002e2a:	d05a      	beq.n	8002ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8002e2c:	e062      	b.n	8002ef4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6818      	ldr	r0, [r3, #0]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	6899      	ldr	r1, [r3, #8]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	f000 f95e 	bl	80030fe <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	609a      	str	r2, [r3, #8]
      break;
 8002e5a:	e04f      	b.n	8002efc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6818      	ldr	r0, [r3, #0]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	6899      	ldr	r1, [r3, #8]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f000 f947 	bl	80030fe <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689a      	ldr	r2, [r3, #8]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e7e:	609a      	str	r2, [r3, #8]
      break;
 8002e80:	e03c      	b.n	8002efc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6818      	ldr	r0, [r3, #0]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	6859      	ldr	r1, [r3, #4]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	f000 f8be 	bl	8003010 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2150      	movs	r1, #80	; 0x50
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 f915 	bl	80030ca <TIM_ITRx_SetConfig>
      break;
 8002ea0:	e02c      	b.n	8002efc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6818      	ldr	r0, [r3, #0]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	6859      	ldr	r1, [r3, #4]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	f000 f8dc 	bl	800306c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2160      	movs	r1, #96	; 0x60
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 f905 	bl	80030ca <TIM_ITRx_SetConfig>
      break;
 8002ec0:	e01c      	b.n	8002efc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6818      	ldr	r0, [r3, #0]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	6859      	ldr	r1, [r3, #4]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	f000 f89e 	bl	8003010 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2140      	movs	r1, #64	; 0x40
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 f8f5 	bl	80030ca <TIM_ITRx_SetConfig>
      break;
 8002ee0:	e00c      	b.n	8002efc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4619      	mov	r1, r3
 8002eec:	4610      	mov	r0, r2
 8002eee:	f000 f8ec 	bl	80030ca <TIM_ITRx_SetConfig>
      break;
 8002ef2:	e003      	b.n	8002efc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ef8:	e000      	b.n	8002efc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002efa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr

08002f28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bc80      	pop	{r7}
 8002f38:	4770      	bx	lr

08002f3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bc80      	pop	{r7}
 8002f4a:	4770      	bx	lr

08002f4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bc80      	pop	{r7}
 8002f5c:	4770      	bx	lr
	...

08002f60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a25      	ldr	r2, [pc, #148]	; (8003008 <TIM_Base_SetConfig+0xa8>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d007      	beq.n	8002f88 <TIM_Base_SetConfig+0x28>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f7e:	d003      	beq.n	8002f88 <TIM_Base_SetConfig+0x28>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a22      	ldr	r2, [pc, #136]	; (800300c <TIM_Base_SetConfig+0xac>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d108      	bne.n	8002f9a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a1a      	ldr	r2, [pc, #104]	; (8003008 <TIM_Base_SetConfig+0xa8>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d007      	beq.n	8002fb2 <TIM_Base_SetConfig+0x52>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa8:	d003      	beq.n	8002fb2 <TIM_Base_SetConfig+0x52>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a17      	ldr	r2, [pc, #92]	; (800300c <TIM_Base_SetConfig+0xac>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d108      	bne.n	8002fc4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a07      	ldr	r2, [pc, #28]	; (8003008 <TIM_Base_SetConfig+0xa8>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d103      	bne.n	8002ff8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	691a      	ldr	r2, [r3, #16]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	615a      	str	r2, [r3, #20]
}
 8002ffe:	bf00      	nop
 8003000:	3714      	adds	r7, #20
 8003002:	46bd      	mov	sp, r7
 8003004:	bc80      	pop	{r7}
 8003006:	4770      	bx	lr
 8003008:	40012c00 	.word	0x40012c00
 800300c:	40000400 	.word	0x40000400

08003010 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003010:	b480      	push	{r7}
 8003012:	b087      	sub	sp, #28
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6a1b      	ldr	r3, [r3, #32]
 8003026:	f023 0201 	bic.w	r2, r3, #1
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800303a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	011b      	lsls	r3, r3, #4
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4313      	orrs	r3, r2
 8003044:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	f023 030a 	bic.w	r3, r3, #10
 800304c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	4313      	orrs	r3, r2
 8003054:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	621a      	str	r2, [r3, #32]
}
 8003062:	bf00      	nop
 8003064:	371c      	adds	r7, #28
 8003066:	46bd      	mov	sp, r7
 8003068:	bc80      	pop	{r7}
 800306a:	4770      	bx	lr

0800306c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800306c:	b480      	push	{r7}
 800306e:	b087      	sub	sp, #28
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	f023 0210 	bic.w	r2, r3, #16
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003096:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	031b      	lsls	r3, r3, #12
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	4313      	orrs	r3, r2
 80030a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	011b      	lsls	r3, r3, #4
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	621a      	str	r2, [r3, #32]
}
 80030c0:	bf00      	nop
 80030c2:	371c      	adds	r7, #28
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr

080030ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b085      	sub	sp, #20
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
 80030d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	f043 0307 	orr.w	r3, r3, #7
 80030ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	609a      	str	r2, [r3, #8]
}
 80030f4:	bf00      	nop
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bc80      	pop	{r7}
 80030fc:	4770      	bx	lr

080030fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030fe:	b480      	push	{r7}
 8003100:	b087      	sub	sp, #28
 8003102:	af00      	add	r7, sp, #0
 8003104:	60f8      	str	r0, [r7, #12]
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	607a      	str	r2, [r7, #4]
 800310a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003118:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	021a      	lsls	r2, r3, #8
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	431a      	orrs	r2, r3
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	4313      	orrs	r3, r2
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	4313      	orrs	r3, r2
 800312a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	609a      	str	r2, [r3, #8]
}
 8003132:	bf00      	nop
 8003134:	371c      	adds	r7, #28
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr

0800313c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800314c:	2b01      	cmp	r3, #1
 800314e:	d101      	bne.n	8003154 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003150:	2302      	movs	r3, #2
 8003152:	e041      	b.n	80031d8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2202      	movs	r2, #2
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800317a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	4313      	orrs	r3, r2
 8003184:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a14      	ldr	r2, [pc, #80]	; (80031e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d009      	beq.n	80031ac <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031a0:	d004      	beq.n	80031ac <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a10      	ldr	r2, [pc, #64]	; (80031e8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d10c      	bne.n	80031c6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	bc80      	pop	{r7}
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	40012c00 	.word	0x40012c00
 80031e8:	40000400 	.word	0x40000400

080031ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr

080031fe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr

08003210 <__libc_init_array>:
 8003210:	b570      	push	{r4, r5, r6, lr}
 8003212:	2600      	movs	r6, #0
 8003214:	4d0c      	ldr	r5, [pc, #48]	; (8003248 <__libc_init_array+0x38>)
 8003216:	4c0d      	ldr	r4, [pc, #52]	; (800324c <__libc_init_array+0x3c>)
 8003218:	1b64      	subs	r4, r4, r5
 800321a:	10a4      	asrs	r4, r4, #2
 800321c:	42a6      	cmp	r6, r4
 800321e:	d109      	bne.n	8003234 <__libc_init_array+0x24>
 8003220:	f000 f822 	bl	8003268 <_init>
 8003224:	2600      	movs	r6, #0
 8003226:	4d0a      	ldr	r5, [pc, #40]	; (8003250 <__libc_init_array+0x40>)
 8003228:	4c0a      	ldr	r4, [pc, #40]	; (8003254 <__libc_init_array+0x44>)
 800322a:	1b64      	subs	r4, r4, r5
 800322c:	10a4      	asrs	r4, r4, #2
 800322e:	42a6      	cmp	r6, r4
 8003230:	d105      	bne.n	800323e <__libc_init_array+0x2e>
 8003232:	bd70      	pop	{r4, r5, r6, pc}
 8003234:	f855 3b04 	ldr.w	r3, [r5], #4
 8003238:	4798      	blx	r3
 800323a:	3601      	adds	r6, #1
 800323c:	e7ee      	b.n	800321c <__libc_init_array+0xc>
 800323e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003242:	4798      	blx	r3
 8003244:	3601      	adds	r6, #1
 8003246:	e7f2      	b.n	800322e <__libc_init_array+0x1e>
 8003248:	080032a4 	.word	0x080032a4
 800324c:	080032a4 	.word	0x080032a4
 8003250:	080032a4 	.word	0x080032a4
 8003254:	080032a8 	.word	0x080032a8

08003258 <memset>:
 8003258:	4603      	mov	r3, r0
 800325a:	4402      	add	r2, r0
 800325c:	4293      	cmp	r3, r2
 800325e:	d100      	bne.n	8003262 <memset+0xa>
 8003260:	4770      	bx	lr
 8003262:	f803 1b01 	strb.w	r1, [r3], #1
 8003266:	e7f9      	b.n	800325c <memset+0x4>

08003268 <_init>:
 8003268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800326a:	bf00      	nop
 800326c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800326e:	bc08      	pop	{r3}
 8003270:	469e      	mov	lr, r3
 8003272:	4770      	bx	lr

08003274 <_fini>:
 8003274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003276:	bf00      	nop
 8003278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800327a:	bc08      	pop	{r3}
 800327c:	469e      	mov	lr, r3
 800327e:	4770      	bx	lr
